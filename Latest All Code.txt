1. backend/scraper/fetch.py = ```
# backend/scraper/fetch.py
import time, math, re
import hashlib, requests
from ..settings import settings
from playwright.sync_api import sync_playwright
from .parse import parse_total_lowongan, parse_listing_page

HEADERS = {"User-Agent": settings.USER_AGENT}

class FetchResult:
    def __init__(self, url: str, html: str):
        self.url = url
        self.html = html
        self.hash = hashlib.sha256(html.encode("utf-8")).hexdigest()

def fetch_html_requests(url: str) -> FetchResult:
    r = requests.get(url, headers=HEADERS, timeout=settings.REQUEST_TIMEOUT)
    r.raise_for_status()
    time.sleep(settings.THROTTLE_SECONDS)
    return FetchResult(url, r.text)

def fetch_html_playwright(url: str) -> FetchResult:
    """
    Render satu halaman dengan Playwright (untuk halaman yang benar-benar punya URL).
    """
    try:
        from playwright.sync_api import sync_playwright, TimeoutError as PWTimeout
    except Exception:
        return fetch_html_requests(url)

    ua = settings.USER_AGENT
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        ctx = browser.new_context(user_agent=ua,
                                  viewport={"width": 1366, "height": 900})
        page = ctx.new_page()
        page.goto(url, timeout=90_000, wait_until="networkidle")

        # Toleran menunggu listing siap
        for sel in [
            "a.v-card.v-card--flat.v-card--link[href*='/lowongan/view/']",
            "text=Daftar Lowongan Magang",
        ]:
            try:
                page.wait_for_selector(sel, timeout=10_000)
                break
            except PWTimeout:
                pass

        # Nudge lazy-load
        for _ in range(3):
            page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
            time.sleep(0.6)

        html = page.content()
        browser.close()
        return FetchResult(url, html)

def fetch_listing_pages_playwright(base_root: str, max_pages: int):
    pages_html = []
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        page.set_default_timeout(20_000)  # ⬅️ biar gak nunggu lama

        url = f"{base_root}/lowongan"
        print(f"[INFO] Navigating to {url}")
        page.goto(url, timeout=90_000, wait_until="networkidle")
        time.sleep(2)

        # Estimasi jumlah halaman dari teks "Ditemukan XXXX lowongan"
        total_text = page.content()
        total_low = parse_total_lowongan(total_text) or 0
        per_page = 20
        est_pages = math.ceil(total_low / per_page) if total_low else max_pages
        pages_to_grab = min(est_pages, max_pages)
        print(f"[INFO] Estimasi halaman: total_low={total_low}, per_page={per_page}, pages≈{est_pages}, cap={pages_to_grab}")

        def click_next(i):
            next_num = i + 2
            nb = page.get_by_role("button", name=re.compile("Next", re.I))
            if nb.count() > 0:
                aria = (nb.first.get_attribute("aria-disabled") or "").lower().strip()
                disabled = aria == "true" or (nb.first.get_attribute("disabled") is not None)
                if not disabled:
                    nb.first.scroll_into_view_if_needed()
                    nb.first.click()
                    return True
            btn = page.locator("li.v-pagination__item button", has_text=str(next_num))
            if btn.count() > 0:
                btn.first.scroll_into_view_if_needed()
                btn.first.click()
                return True
            btn = page.locator(f"button[aria-label*='Page {next_num}']")
            if btn.count() > 0:
                btn.first.scroll_into_view_if_needed()
                btn.first.click()
                return True
            return False

        for i in range(pages_to_grab):
            print(f"[INFO] Capturing page {i+1}")
            pages_html.append(page.content())

            # kalau ini halaman terakhir yg direncanakan → stop (jangan klik apa pun)
            if i == pages_to_grab - 1:
                break

            # simpan teks item pertama untuk deteksi perubahan
            first_card = page.locator("a.v-card.v-card--flat.v-card--link[href*='/lowongan/view/']").first
            before_txt = (first_card.inner_text() or "") if first_card.count() else ""

            if not click_next(i):
                print("[INFO] Tidak menemukan tombol Next/angka. Selesai.")
                break

            # tunggu konten berubah max 12s, kalau tidak berubah ya berhenti
            try:
                page.wait_for_function(
                    """(prev) => {
                        const el = document.querySelector("a.v-card.v-card--flat.v-card--link[href*='/lowongan/view/']");
                        return el && el.innerText.trim() !== (prev || "").trim();
                    }""",
                    arg=before_txt,
                    timeout=12_000,
                )
            except Exception:
                print("[WARN] Halaman tidak berubah setelah klik. Asumsi sudah akhir. Stop.")
                break

            time.sleep(0.8)
        # ⬇️ tambahkan ini
        print(f"[STEP] Pagination complete. Collected {len(pages_html)} pages. Handing off to parser...", flush=True)
        
        browser.close()
    return pages_html



def fetch_html(url: str) -> FetchResult:
    if settings.USE_PLAYWRIGHT:
        return fetch_html_playwright(url)
    return fetch_html_requests(url)

def fetch_detail_playwright(url: str) -> FetchResult:
    """
    Render halaman DETAIL lowongan dengan wait yang spesifik:
    - label 'Program Studi' / chip '.v-chip__content'
    - plus nudge lazy-load (scroll)
    """
    ua = settings.USER_AGENT
    with sync_playwright() as p:
        # Chromium lebih stabil di situs ini
        browser = p.chromium.launch(headless=True)
        ctx = browser.new_context(user_agent=ua,
                                    viewport={"width": 1366, "height": 900})
        page = ctx.new_page()
        page.goto(url, timeout=120_000, wait_until="networkidle")
        # tunggu salah satu tanda detail siap
        targets = [
            "text=Detail Lowongan",
            "label:has-text('Program Studi')",
            ".v-chip__content",
            "label:has-text('Deskripsi')"
        ]
        for sel in targets:
            try:
                page.wait_for_selector(sel, timeout=30_000)
                break
            except Exception:
                pass
        # nudge render chip
        for _ in range(4):
            page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
            page.wait_for_timeout(500)
        html = page.content()
        browser.close()
        return FetchResult(url, html)

def fetch_detail_html(url: str) -> FetchResult:
    """
    Render detail dengan Playwright lebih dahulu (karena chip Program Studi butuh render).
    Jatuh ke requests jika Playwright gagal/unavailable.
    """
    try:
        return fetch_detail_playwright(url)  # prefer Playwright
    except Exception:
        pass
    # fallback: static HTML
    return fetch_html_requests(url)```

2. backend/scraper/parse.py = ```
# backend/scraper/parse.py
import re
from bs4 import BeautifulSoup
from datetime import datetime
from typing import List, Dict, Tuple, Optional

# --- Regex & helpers umum ---
NUM_ID_RX = re.compile(r"(\d{1,3}(?:\.\d{3})+|\d+)")
P_RX = re.compile(r"(\d[\d\.]*)\s*pelamar", re.I)
K_RX = re.compile(r"(\d[\d\.]*)\s*(kebutuhan|kuota)", re.I)
FOUND_RX = re.compile(r"Ditemukan\s+(\d[\d\.]*)\s+lowongan", re.I)
LOC_HINT_RX = re.compile(r"\b(KOTA|KAB\.?|KABUPATEN|PROV\.?|PROVINSI)\b", re.I)

MONTH_MAP = {
  "Januari":"01","Februari":"02","Maret":"03","April":"04","Mei":"05","Juni":"06",
  "Juli":"07","Agustus":"08","September":"09","Oktober":"10","November":"11","Desember":"12",
  # short
  "Jan":"01","Feb":"02","Mar":"03","Apr":"04","Mei":"05","Jun":"06","Jul":"07","Agu":"08",
  "Sep":"09","Okt":"10","Nov":"11","Des":"12"
}

def to_int_id(num_text: Optional[str]) -> Optional[int]:
    if not num_text:
        return None
    m = NUM_ID_RX.search(num_text)
    if not m:
        return None
    return int(m.group(1).replace('.', ''))

def id_date_to_iso(text: Optional[str]) -> Optional[str]:
    # contoh: "3 Oktober 2025"
    if not text:
        return None
    parts = text.strip().split()
    if len(parts) == 3 and parts[1] in MONTH_MAP:
        d, m, y = parts
        try:
            return f"{y}-{MONTH_MAP[m]}-{int(d):02d}"
        except:
            return None
    return None

# -------- HOME --------
def parse_home_stats(html: str) -> Tuple[Optional[int], Optional[int]]:
    soup = BeautifulSoup(html, 'lxml')
    jumlah_perusahaan = None
    jumlah_lamaran = None

    # Cari label "Jumlah Perusahaan"
    for label in soup.find_all(string=re.compile(r"Jumlah Perusahaan", re.I)):
        h4 = None
        for anc in getattr(label, "parents", []):
            h4 = getattr(anc, "find", lambda *_:None)('h4')
            if h4:
                jumlah_perusahaan = to_int_id(h4.get_text(strip=True))
                break
        if jumlah_perusahaan:
            break

    # Cari label "Jumlah Lamaran"
    for label in soup.find_all(string=re.compile(r"Jumlah Lamaran", re.I)):
        h4 = None
        for anc in getattr(label, "parents", []):
            h4 = getattr(anc, "find", lambda *_:None)('h4')
            if h4:
                jumlah_lamaran = to_int_id(h4.get_text(strip=True))
                break
        if jumlah_lamaran:
            break

    return jumlah_perusahaan, jumlah_lamaran

def parse_timeline(html: str) -> List[Dict]:
    soup = BeautifulSoup(html, 'lxml')
    items: List[Dict] = []
    container = soup.select_one('.timeline-section') or soup

    batch_chip = container.find(string=re.compile(r"Batch", re.I)) if container else None
    batch = None
    if batch_chip:
        m = re.search(r"Batch\s*(\d+)", batch_chip)
        batch = f"Batch {m.group(1)}" if m else (batch_chip.strip() if isinstance(batch_chip, str) else None)

    order = 0
    for it in container.select('.timeline .timeline-item'):
        title_el = it.find(['h5','h6'])
        date_el = it.find(class_=re.compile(r"text-muted|small|text-body", re.I))
        title = title_el.get_text(strip=True) if title_el else None

        date_text = date_el.get_text(strip=True) if date_el else ''
        parts = [s.strip() for s in date_text.split('-')]
        start_date = id_date_to_iso(parts[0]) if parts else None
        end_date = id_date_to_iso(parts[1]) if len(parts) > 1 else None

        classes = it.get('class') or []
        status = 'active' if 'active' in classes else ('upcoming' if 'upcoming' in classes else None)

        items.append({
            'batch': batch,
            'title': title,
            'start_date': start_date,
            'end_date': end_date,
            'status': status,
            'order_index': order
        })
        order += 1
    return items

# -------- LISTING --------
def parse_total_lowongan(html: str) -> Optional[int]:
    txt = BeautifulSoup(html, 'lxml').get_text(' ', strip=True)
    m = FOUND_RX.search(txt)
    return to_int_id(m.group(1)) if m else None

def compute_metrics(pelamar: Optional[int], kuota: Optional[int]):
    pelamar = pelamar or 0
    kuota = kuota or 0
    ar = None
    dr = None
    if pelamar > 0:
        ar = (kuota / pelamar)
    if kuota > 0:
        dr = (pelamar / kuota)
    return ar, dr

def parse_listing_page(html: str) -> List[Dict]:
    soup = BeautifulSoup(html, "lxml")
    items: List[Dict] = []

    # (opsional) total lowongan — kalau mau dipakai di tempat lain
    _ = parse_total_lowongan(html)

    # Kartu: <a class="v-card v-card--flat v-card--link" href="/lowongan/view/...">
    for a in soup.select("a.v-card.v-card--flat.v-card--link[href*='/lowongan/view/']"):
        href = a.get("href", "")
        source_url = ("https://maganghub.kemnaker.go.id" + href) if href.startswith("/") else (href or None)

        # Perusahaan & Judul (pakai fallback kecil)
        company_el = a.select_one("h6.text-h6") or a.select_one("h6")
        title_el = a.select_one("h5.text-h5") or a.select_one("h5")

        # Lokasi: contoh "KAB. TANGERANG , BANTEN" (sering ada pada <div style="font-size: 11px;"> ... </div>)
        lokasi = None
        # 1) Heuristik: cari div kecil yang berisi pola lokasi (ada koma atau LOC_HINT_RX)
        for div in a.find_all("div"):
            txt = (div.get_text(strip=True) or "")
            if not txt:
                continue
            style = (div.get("style") or "").lower()
            if ("font-size" in style and ("," in txt or LOC_HINT_RX.search(txt))):
                lokasi = txt
                break
        # 2) Fallback: div setelah nama perusahaan
        if not lokasi and company_el:
            sib = company_el.find_next("div")
            if sib:
                txt = sib.get_text(strip=True) or ""
                if ("," in txt or LOC_HINT_RX.search(txt)):
                    lokasi = txt
        # 3) Normalisasi ringan (hapus spasi ganda di sekitar koma)
        if lokasi:
            lokasi = re.sub(r"\s*,\s*", " , ", lokasi).strip()



        # Tanggal: <i class="tabler-calendar"> ... <span>3 Oktober 2025</span>
        cal_icon = a.select_one(".tabler-calendar")
        tanggal = None
        if cal_icon:
            span = cal_icon.find_next("span")
            if span:
                tanggal = span.get_text(strip=True)
        tanggal_iso = id_date_to_iso(tanggal) if tanggal else None

        # Pelamar | Kebutuhan: <i class="tabler-users"> ... <span>905 pelamar | 1 kebutuhan</span>
        users_icon = a.select_one(".tabler-users")
        pelamar = kuota = None
        if users_icon:
            span = users_icon.find_next("span")
            if span:
                info = span.get_text(" ", strip=True)
                mp = P_RX.search(info); mk = K_RX.search(info)
                if mp: pelamar = to_int_id(mp.group(1))
                if mk: kuota   = to_int_id(mk.group(1))

        ar, dr = compute_metrics(pelamar, kuota)

        items.append({
            "external_id": source_url,
            "source_url": source_url,
            "judul": title_el.get_text(strip=True) if title_el else None,
            "perusahaan": company_el.get_text(strip=True) if company_el else None,
            "lokasi": lokasi,
            "sektor": None,
            "tanggal_posting": tanggal_iso,
            "pelamar": pelamar,
            "kuota": kuota,
            "acceptance_rate": ar,
            "demand_ratio": dr,
            "velocity_pelamar_per_day": None,
            "status": "open",
            "deskripsi_short": None,
            "fetched_at": datetime.utcnow().isoformat(),
            "content_hash": None
        })

    return items

# -------- DETAIL: DESKRIPSI (robust, berbasis label) --------
def parse_detail_deskripsi(html: str) -> Optional[str]:
    """
    Ambil blok 'Deskripsi' dari halaman detail lowongan.

    Strategi (sesuai prompt):
    - Cari label 'Deskripsi' (normalize-space).
    - Ambil ancestor barisnya (v-row / row container).
    - Dari baris itu, ambil kolom kanan yang mengandung .text-body-1 lalu <p>.
    - Normalisasi whitespace dan bullet.

    Fallback:
    - Jika struktur tidak persis sama, cari div.text-body-1 terdekat setelah label.
    """
    soup = BeautifulSoup(html, "lxml")

    # 1) Temukan elemen label "Deskripsi" (tahan variasi tag & spasi)
    def _is_deskripsi_label(el) -> bool:
        if not el or not hasattr(el, "get_text"):
            return False
        txt = el.get_text(" ", strip=True)
        return bool(re.match(r"^Deskripsi$", txt, flags=re.I))

    label = None
    for el in soup.find_all(["label", "div", "span"]):
        if _is_deskripsi_label(el):
            label = el
            break
    if not label:
        # fallback: cari string "Deskripsi" lalu ambil parent sebagai 'label'
        cand = soup.find(string=re.compile(r"^\s*Deskripsi\s*$", re.I))
        if cand and getattr(cand, "parent", None):
            label = cand.parent

    if not label:
        return None

    # 2) Ambil "baris" terdekat (v-row / row container)
    row = None
    # cari parent yang class-nya mengandung v-row
    row = label.find_parent(class_=re.compile(r"\bv-row\b", re.I))
    # kalau nggak ketemu, ambil parent div terdekat sebagai fallback
    if not row:
        row = label.find_parent("div")

    # 3) Dari baris itu, ambil kolom kanan yang mengandung .text-body-1
    target = None
    if row:
        target = row.find(class_=re.compile(r"\btext-body-1\b", re.I))
        # beberapa halaman pakai v-col-md-8 sebagai kolom kanan
        if not target:
            right = row.find(class_=re.compile(r"\bv-col-md-8\b|\bv-col-12\b", re.I))
            if right:
                target = right.find(class_=re.compile(r"\btext-body-1\b", re.I)) or right

    # 4) Fallback terakhir: cari .text-body-1 tepat setelah label
    if not target:
        # cari sibling/next block yang mengandung text-body-1
        sib = label.find_next(class_=re.compile(r"\btext-body-1\b", re.I))
        if sib:
            target = sib

    if not target:
        return None

    # 5) Ambil semua <p> (atau teks mentah kalau <p> tidak ada)
    parts: List[str] = []
    for p in target.find_all("p"):
        t = p.get_text(" ", strip=True)
        if t:
            parts.append(t)
    if not parts:
        # misal kontennya langsung text node tanpa <p>
        raw = target.get_text("\n", strip=True)
        if raw:
            parts = [raw]

    if not parts:
        return None

    # 6) Normalisasi bullet & whitespace
    text = "\n".join(parts)
    # ubah "- foo" atau "• foo" jadi bullet konsisten
    text = re.sub(r"^\s*[-•]\s*", "• ", text, flags=re.M)
    # rapikan spasi gandaa
    text = re.sub(r"[ \t]+\n", "\n", text)
    return text.strip() or None

# -------- DETAIL PAGE --------
def parse_detail_program_studi(html: str) -> List[str]:
    """
    Ambil daftar Program Studi dari halaman detail lowongan.
    Struktur yang dicari (kurang lebih):
      <label>Program Studi</label>
      <div class="d-flex flex-wrap gap-2">
         <span class="v-chip ..."><div class="v-chip__content">Teknik Sipil</div></span> ...
      </div>
    Return: list of strings (tanpa duplikat, urutan sesuai kemunculan).
    """
    soup = BeautifulSoup(html, "lxml")

    # 1) Cari label "Program Studi" (beberapa halaman pakai <label>, kadang <div>)
    label = None
    for lab in soup.find_all(["label", "div", "span"], string=re.compile(r"^\s*Program Studi\s*$", re.I)):
        label = lab; break
    # 2) Jika label tidak ketemu, fallback: langsung sweep semua chip dan lihat konteks terdekat
    containers = []
    if label:
        # Struktur Vuetify: label -> (kolom kanan) -> wrapper chip 'flex-wrap gap-2'
        # coba parent langsung
        for anc in [label.parent, getattr(label, "find_parent", lambda *_:None)("div")]:
            if not anc: continue
            cand = anc.find(class_=re.compile(r"(flex-wrap|gap-2)", re.I))
            if cand: containers.append(cand); break
        # fallback: cari sibling kolom kanan terdekat
        if not containers:
            sib = label.find_next(class_=re.compile(r"(flex-wrap|gap-2)", re.I))
            if sib: containers.append(sib)
    if not containers:
        # fallback global terakhir: semua wrapper chip di halaman
        containers = soup.find_all(class_=re.compile(r"(flex-wrap|gap-2)", re.I))

    prodi: List[str] = []
    for cont in containers:
        for chip in cont.find_all(class_=re.compile(r"v-chip__content")):
            t = chip.get_text(strip=True)
            if t and t not in prodi:
                prodi.append(t)
    return prodi
``` 

3. backend/scraper/run_full_scrape.py = ```
# backend/scraper/run_full_scrape.py
import os
from urllib.parse import urljoin
from datetime import datetime
from time import perf_counter  # + timing high-res

from backend.settings import settings
from backend.db import get_conn
from backend.models import (
    upsert_lowongan, recompute_perusahaan,
    upsert_site_stats, replace_timeline
)
from backend.scraper.fetch import fetch_html, fetch_listing_pages_playwright, fetch_detail_html
from backend.scraper.parse import (
    parse_listing_page, parse_total_lowongan,
    parse_home_stats, parse_timeline, parse_detail_program_studi, parse_detail_deskripsi
)

from dotenv import load_dotenv
load_dotenv()  # baca .env di root project

# =============== Timing utils ===============
def fmt_dur(sec: float) -> str:
    """Format durasi: 1h 23m 45.6s / 12m 03.2s / 4.2s"""
    sec = float(sec)
    if sec >= 3600:
        h = int(sec // 3600); m = int((sec % 3600) // 60); s = sec % 60
        return f"{h}h {m}m {s:0.1f}s"
    if sec >= 60:
        m = int(sec // 60); s = sec % 60
        return f"{m}m {s:05.2f}s"
    return f"{sec:0.2f}s"

class StepTimer:
    """Context manager untuk print durasi step dengan prefix [time]."""
    def __init__(self, label: str):
        self.label = label
        self.t0 = None
    def __enter__(self):
        self.t0 = perf_counter()
        print(f"[time] ▶ {self.label} …", flush=True)
        return self
    def __exit__(self, exc_type, exc, tb):
        dt = perf_counter() - self.t0
        status = "OK" if exc is None else "ERR"
        print(f"[time] ⏱ {self.label} [{status}] {fmt_dur(dt)}", flush=True)


def _schema_path():
    here = os.path.dirname(__file__)
    # pakai schema PG kalau DATABASE_URL ada
    if getattr(settings, "DATABASE_URL", None):
        return os.path.abspath(os.path.join(here, "..", "schema_postgres.sql"))
    return os.path.abspath(os.path.join(here, "..", "schema.sql"))

def init_db():
    schema = _schema_path()
    with open(schema, "r", encoding="utf-8") as f, get_conn(settings.DB_PATH) as conn:
        conn.executescript(f.read())


def _base_root():
    base = settings.BASE_URL.strip().rstrip("/")
    return base.split("/lowongan")[0] if "/lowongan" in base else base

def crawl_listing():
    base_root = _base_root()

    # total dari halaman 1 (untuk estimasi)
    first = fetch_html(f"{base_root}/lowongan")
    total_lowongan = parse_total_lowongan(first.html)

    all_rows, pages_html = [], []

    if settings.USE_PLAYWRIGHT:
        print("[STEP] 1/4 Pagination with Playwright…", flush=True)
        t_pag = perf_counter()
        pages_html = fetch_listing_pages_playwright(base_root, settings.MAX_PAGES)
        print(f"[time] Pagination collected {len(pages_html)} pages in {fmt_dur(perf_counter()-t_pag)}", flush=True)
    else:
        print("[WARN] Static mode: hanya ambil halaman 1.", flush=True)
        pages_html = [fetch_html(f"{base_root}/lowongan").html]

    # -------- Parse listing pages --------
    from hashlib import sha256
    print(f"[STEP] 2/4 Parsing {len(pages_html)} pages into cards…", flush=True)
    t_parse = perf_counter()                                      
    for pi, html in enumerate(pages_html, 1):        
        rows = parse_listing_page(html)
        for r in rows:
            if r.get("source_url", "").startswith("/"):
                r["source_url"] = urljoin(base_root, r["source_url"])
            key = f"{r.get('judul')}|{r.get('perusahaan')}|{r.get('pelamar')}|{r.get('kuota')}|{r.get('tanggal_posting')}"
            r["content_hash"] = sha256(key.encode("utf-8")).hexdigest()
        all_rows.extend(rows)
        if pi % 10 == 0 or pi == len(pages_html):
            print(f"[INFO]  … parsed pages {pi}/{len(pages_html)} (cards so far: {len(all_rows)})", flush=True)

    print(f"[time] Parsed listing cards total: {len(all_rows)} in {fmt_dur(perf_counter()-t_parse)}", flush=True)  # +

    # -------- ENRICH (Program Studi) --------
    if getattr(settings, "DETAIL_ENRICH", True) and all_rows:
        from concurrent.futures import ThreadPoolExecutor, as_completed
        limit   = min(getattr(settings, "DETAIL_MAX", 400), len(all_rows))
        workers = max(1, getattr(settings, "DETAIL_WORKERS", 6))
        print(f"[STEP] 3/4 Enrich detail pages: limit={limit}, workers={workers}, playwright_detail={getattr(settings,'USE_PLAYWRIGHT_DETAIL', False)}", flush=True)

        def enrich_one(r):
            url = r.get("source_url")
            if not url:
                return r
            try:
                det = fetch_detail_html(url)
                # Program Studi
                prodi_list = parse_detail_program_studi(det.html) or []
                if prodi_list:
                    r["sektor"] = "; ".join(prodi_list)

                # Deskripsi (baru!)
                desc = parse_detail_deskripsi(det.html)
                if desc:
                    # batasi agar tidak terlalu panjang (opsional)
                    r["deskripsi_short"] = desc[:1200]
            except Exception:
                pass
            return r
        
        # === ENRICH: Program Studi (sektor) dari halaman detail ===
        # Aman: batasi jumlah parallelism implicit (disini sequential; bisa diparalelkan jika perlu)
        # Ikuti throttle global via settings.THROTTLE_SECONDS (sudah diterapkan di fetch requests).
            
        t_enrich = perf_counter()
        enriched = []
        with ThreadPoolExecutor(max_workers=workers) as ex:
            futures = [ex.submit(enrich_one, all_rows[i]) for i in range(limit)]
            done = 0
            for fut in as_completed(futures):
                enriched.append(fut.result())
                done += 1
                if done % 50 == 0 or done == limit:               
                    elapsed = perf_counter() - t_enrich           
                    rate = done / elapsed if elapsed > 0 else 0.0
                    print(f"[INFO]  … detail done {done}/{limit} • {rate:0.2f} jobs/s • elapsed {fmt_dur(elapsed)}", flush=True)

        dt_enrich = perf_counter() - t_enrich
        all_rows = enriched + all_rows[limit:]        
        n_with = sum(1 for r in all_rows[:limit] if (r.get("sektor") or "").strip())
        print(f"[time] Enrichment complete: with_prodi={n_with}/{limit} in {fmt_dur(dt_enrich)}", flush=True)
    else:
        print("[INFO] Detail enrichment disabled or no rows.", flush=True)

    return all_rows, total_lowongan

def crawl_home():
    base_root = _base_root()
    res = fetch_html(f"{base_root}/")
    perusahaan, lamaran = parse_home_stats(res.html)
    timeline = parse_timeline(res.html)
    return perusahaan, lamaran, timeline

def main():
    t_all = perf_counter()  # + total wall-time
    from backend.settings import settings
    print(f"[cfg] MAX_PAGES={settings.MAX_PAGES} | DETAIL_MAX={getattr(settings,'DETAIL_MAX',None)} | "
        f"DETAIL_ENRICH={getattr(settings,'DETAIL_ENRICH',None)} | WORKERS={getattr(settings,'DETAIL_WORKERS',None)}",
        flush=True)
    print("[STEP] 0/4 Init DB schema…", flush=True)
    
    
    with StepTimer("Init DB schema"):                      
        init_db()

    print("[STEP] 1/4 Crawl listing (pagination + parsing)…", flush=True)
    with StepTimer("Crawl listing (pagination + parsing + enrich)"):  
        rows, total_low = crawl_listing()
        print(f"[INFO] Crawl complete. Rows parsed: {len(rows)} • Est. total_lowongan: {total_low}", flush=True)

    print("[STEP] 2/4 Upsert listing → DB…", flush=True)
    with StepTimer("Upsert listing & recompute perusahaan"):           
        upsert_lowongan(rows)
        recompute_perusahaan()
        print("[INFO] Upsert & recompute_perusahaan selesai.", flush=True)

    print("[STEP] 3/4 Fetch home stats & timeline…", flush=True)
    with StepTimer("Fetch home stats & timeline + upsert"):            
        perusahaan, lamaran, tl = crawl_home()
        upsert_site_stats(
            jumlah_perusahaan=perusahaan,
            jumlah_lamaran=lamaran,
            total_lowongan=total_low,
            fetched_at=datetime.utcnow().isoformat()
        )
        if tl:
            replace_timeline(tl)
        print("[INFO] Home stats & timeline disimpan.", flush=True)

    # ---- LOG VERIFIKASI ENRICHMENT (tetap seperti punyamu) ----
    n_with_prodi = sum(1 for r in rows if (r.get("sektor") or "").strip() != "")
    print(
        f"[SUMMARY] Lowongan upserted: {len(rows)} | total_lowongan={total_low} | "
        f"perusahaan={perusahaan} | lamaran={lamaran} | timeline_items={len(tl or [])} | "
        f"dengan_ProgramStudi={n_with_prodi}",
        flush=True
    )

    try:
        import pandas as pd
        df = pd.DataFrame(rows, columns=[
            "judul","perusahaan","lokasi","sektor","tanggal_posting","pelamar","kuota","source_url"
        ])
        print("\n=== SAMPLE HASIL SCRAPE (head) ===", flush=True)
        print(df.head(12).to_string(index=False), flush=True)
        # ringkasan unik prodi (10 contoh)
        semua_prodi = []
        for s in df["sektor"].dropna():
            for p in str(s).split(";"):
                p = p.strip()
                if p: semua_prodi.append(p)
        top = pd.Series(semua_prodi).value_counts().head(10) if semua_prodi else None
        if top is not None:
            print("\nTop Program Studi (contoh):", flush=True)
            print(top.to_string(), flush=True)
    except Exception as e:
        # fallback simple print jika pandas tidak ada
        print("\n(pandas tidak tersedia / gagal cetak head, fallback list 5 baris)", flush=True)
        for i, r in enumerate(rows[:3], 1):
            print(f"[{i}] {r.get('judul')} | {r.get('perusahaan')} | {r.get('lokasi')} | sektor={r.get('sektor')}", flush=True)

    print(f"[DONE] 4/4 All tasks finished ✅ • total wall time {fmt_dur(perf_counter()-t_all)}", flush=True)

if __name__ == "__main__":
    main()
``` 

4. .env = ```
BASE_URL=https://maganghub.kemnaker.go.id/lowongan
DB_PATH=backend/data.sqlite
# ---- isi dari Neon (contoh):
DATABASE_URL="postgresql://neondb_owner:npg_DZ8NfAKdthc6@ep-little-term-a1od2c5c-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
MAX_PAGES=999999
THROTTLE_SECONDS=1.0
USER_AGENT="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"
REQUEST_TIMEOUT=30
USE_PLAYWRIGHT=1
DETAIL_ENRICH=1
DETAIL_MAX=999999
DETAIL_WORKERS=6``` 

5. backend/app.py = ```
from fastapi import FastAPI, Query
from fastapi.middleware.cors import CORSMiddleware
from typing import Optional, List
from .models import list_lowongan, list_perusahaan, list_home, list_distinct_options, list_options

app = FastAPI(title="MagangPulse API", version="1.1.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=False,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/api/home")
def api_home():
    stats, timeline = list_home()
    return {"stats": stats, "timeline": timeline}

@app.get("/api/options")
def api_options():
    return list_options()

@app.get("/api/lowongan")
def api_lowongan(
    page: int = 1,
    page_size: int = 20,
    query: Optional[str] = None,
    perusahaan: Optional[List[str]] = Query(None),
    lokasi: Optional[List[str]] = Query(None),
    sektor: Optional[List[str]] = Query(None),
    min_ar: Optional[float] = Query(None, ge=0.0, le=1.0),
    max_ar: Optional[float] = Query(None, ge=0.0, le=1.0),
    min_pelamar: Optional[int] = None,
    max_pelamar: Optional[int] = None,
    min_kuota: Optional[int] = None,
    max_kuota: Optional[int] = None,
    sort: str = "recent"
):
    items, total = list_lowongan(page, page_size, query, perusahaan, lokasi, sektor,
                                 min_ar, max_ar, min_pelamar, max_pelamar,
                                 min_kuota, max_kuota, sort)
    return {"data": items, "total": total, "page": page, "page_size": page_size, "snapshot": True}

@app.get("/api/perusahaan")
def api_perusahaan(sort: str = "ar_desc", page: int = 1, page_size: int = 50):
    items, total = list_perusahaan(sort, page, page_size)
    return {"data": items, "total": total, "page": page, "page_size": page_size, "snapshot": True}


# ===== DEBUG: lihat DB yang dipakai API =====
@app.get("/api/_debug/db")
def api_debug_db():
    from .settings import settings
    use_pg = bool(settings.DATABASE_URL)

    # mask password biar aman saat dilihat di browser/log
    db_url = settings.DATABASE_URL
    if db_url:
        try:
            # potong bagian kredensial sebelum '@'
            cred, rest = db_url.split("@", 1)
            proto = cred.split("://", 1)[0]
            db_url = f"{proto}://***:***@{rest}"
        except Exception:
            db_url = "postgresql://***:***@…"

    return {"use_postgres": use_pg, "db_url": db_url}

@app.get("/api/options")
def api_options():
    """
    Daftar unik opsi untuk dropdown (perusahaan, lokasi, sektor/program studi).
    """
    return list_distinct_options()```

6. backend/db.py = ```
# backend/db.py
import os, re
from contextlib import contextmanager
from pathlib import Path
from .settings import settings

USE_PG = bool(settings.DATABASE_URL)

# --- helper: konversi placeholder :name -> %(name)s (untuk psycopg) ---
# sebelumnya: _named_re = re.compile(r":([a-zA-Z_][a-zA-Z0-9_]*)")
_named_re = re.compile(r"(?<!:):([a-zA-Z_][a-zA-Z0-9_]*)")  # jangan match '::type'

def _convert_named(sql: str) -> str:
    return _named_re.sub(r"%(\1)s", sql)

if USE_PG:
    import psycopg
    from psycopg.rows import dict_row

    class _PgCursor:
        def __init__(self, cur):
            self._cur = cur
        def execute(self, sql, params=None):
            if isinstance(params, dict):
                sql = _convert_named(sql)
            return self._cur.execute(sql, params)
        def executemany(self, sql, seq_of_params):
            # seq_of_params bisa list[dict] atau list[tuple]
            # kalau dict, konversi placeholder
            if seq_of_params and isinstance(seq_of_params[0], dict):
                sql = _convert_named(sql)
            return self._cur.executemany(sql, seq_of_params)
        def fetchone(self): return self._cur.fetchone()
        def fetchall(self): return self._cur.fetchall()
        @property
        def rowcount(self): return self._cur.rowcount

    class _PgConn:
        def __init__(self, conn): self._conn = conn
        def cursor(self): return _PgCursor(self._conn.cursor())
        def commit(self): self._conn.commit()
        def close(self): self._conn.close()
        # sqlite kompat: executescript
        def executescript(self, script_text: str):
            # pecah di ';' yang simple; abaikan baris kosong/komentar
            stmts = []
            buff = []
            for line in script_text.splitlines():
                l = line.strip()
                if not l or l.startswith("--"):
                    continue
                buff.append(line)
                if l.endswith(";"):
                    stmts.append("\n".join(buff))
                    buff = []
            if buff:
                stmts.append("\n".join(buff))
            with self._conn.cursor() as c:
                for s in stmts:
                    c.execute(s)

    @contextmanager
    def get_conn(_db_path=None):
        conn = psycopg.connect(settings.DATABASE_URL, row_factory=dict_row, autocommit=False)
        try:
            yield _PgConn(conn)
            conn.commit()
        finally:
            conn.close()

else:
    import sqlite3
    DB_PATH = Path(__file__).with_name("data.sqlite")

    @contextmanager
    def get_conn(db_path=None):
        path = Path(db_path) if db_path else DB_PATH
        conn = sqlite3.connect(path)
        conn.row_factory = sqlite3.Row
        try:
            yield conn
        finally:
            conn.commit()
            conn.close()

``` 

7. backend/models.py = ```
from typing import List, Optional, Tuple, Sequence
from .db import get_conn
from .settings import settings

def upsert_lowongan(rows: List[dict]):
    if not rows:
        return 0
    with get_conn(settings.DB_PATH) as conn:
        cur = conn.cursor()
        q = """
        INSERT INTO lowongan(
            external_id, source_url, judul, perusahaan, lokasi, sektor,
            tanggal_posting, pelamar, kuota, acceptance_rate, demand_ratio,
            velocity_pelamar_per_day, status, deskripsi_short, fetched_at, content_hash
        ) VALUES (:external_id, :source_url, :judul, :perusahaan, :lokasi, :sektor,
                  :tanggal_posting, :pelamar, :kuota, :acceptance_rate, :demand_ratio,
                  :velocity_pelamar_per_day, :status, :deskripsi_short, :fetched_at, :content_hash)
        ON CONFLICT(source_url) DO UPDATE SET
            judul=excluded.judul,
            perusahaan=excluded.perusahaan,
            lokasi=excluded.lokasi,
            sektor=excluded.sektor,
            tanggal_posting=excluded.tanggal_posting,
            pelamar=excluded.pelamar,
            kuota=excluded.kuota,
            acceptance_rate=excluded.acceptance_rate,
            demand_ratio=excluded.demand_ratio,
            velocity_pelamar_per_day=excluded.velocity_pelamar_per_day,
            status=excluded.status,
            deskripsi_short=excluded.deskripsi_short,
            fetched_at=excluded.fetched_at,
            content_hash=excluded.content_hash;
        """
        cur.executemany(q, rows)
        return cur.rowcount

def recompute_perusahaan():
    with get_conn(settings.DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("DELETE FROM perusahaan;")
        q = """
        INSERT INTO perusahaan(nama, lokasi, sektor, n_lowongan_aktif, kuota_total, pelamar_total,
                               ar_rata2, dr_rata2, source_url, fetched_at)
        SELECT perusahaan as nama,
               NULL as lokasi,
               NULL as sektor,
               SUM(CASE WHEN status='open' THEN 1 ELSE 0 END) as n_lowongan_aktif,
               SUM(COALESCE(kuota,0)) as kuota_total,
               SUM(COALESCE(pelamar,0)) as pelamar_total,
               AVG(acceptance_rate) as ar_rata2,
               AVG(demand_ratio) as dr_rata2,
               MIN(source_url) as source_url,
               MAX(fetched_at) as fetched_at
        FROM lowongan
        GROUP BY perusahaan;
        """
        cur.execute(q)
        return cur.rowcount

# NEW: site stats & timeline
def upsert_site_stats(
    jumlah_perusahaan=None,
    jumlah_lamaran=None,
    total_lowongan=None,
    fetched_at=None
):
    use_pg = bool(settings.DATABASE_URL)

    with get_conn(settings.DB_PATH) as conn:
        cur = conn.cursor()

        # ensure row id=1 exists (PG vs SQLite syntax)
        if use_pg:
            cur.execute("INSERT INTO site_stats(id) VALUES(1) ON CONFLICT (id) DO NOTHING")
        else:
            cur.execute("INSERT OR IGNORE INTO site_stats(id) VALUES(1)")

        # update using named params (works for both sqlite & our psycopg wrapper)
        cur.execute(
            """
            UPDATE site_stats SET
              jumlah_perusahaan = COALESCE(:jumlah_perusahaan, jumlah_perusahaan),
              jumlah_lamaran    = COALESCE(:jumlah_lamaran,    jumlah_lamaran),
              total_lowongan    = COALESCE(:total_lowongan,    total_lowongan),
              fetched_at        = COALESCE(:fetched_at,        fetched_at)
            WHERE id = 1
            """,
            {
                "jumlah_perusahaan": jumlah_perusahaan,
                "jumlah_lamaran": jumlah_lamaran,
                "total_lowongan": total_lowongan,
                "fetched_at": fetched_at,
            },
        )
        return cur.rowcount

def replace_timeline(items: List[dict]):
    with get_conn(settings.DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("DELETE FROM program_timeline;")
        cur.executemany(
            """
            INSERT INTO program_timeline(batch, title, start_date, end_date, status, order_index)
            VALUES(:batch, :title, :start_date, :end_date, :status, :order_index)
            """,
            items,
        )
        return cur.rowcount

def list_home():
    with get_conn(settings.DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM site_stats WHERE id=1")
        stats = dict(cur.fetchone() or {})
        cur.execute("SELECT * FROM program_timeline ORDER BY order_index ASC, id ASC")
        timeline = [dict(r) for r in cur.fetchall()]
        return stats, timeline

def _read_count_row(row):
    """Row bisa tuple/sqlite Row/dict_row → kembalikan integer count."""
    if row is None:
        return 0
    # tuple/list
    if isinstance(row, (tuple, list)):
        return int(row[0])
    # mapping (sqlite Row mapping / psycopg dict_row)
    if hasattr(row, "get"):
        # pakai alias 'cnt' kalau ada; kalau tidak ambil nilai pertama
        return int(row.get("cnt")) if row.get("cnt") is not None else int(next(iter(row.values())))
    # fallback sangat jarang
    return int(list(row)[0])

def list_lowongan(
    page: int = 1,
    page_size: int = 20,
    query: Optional[str] = None,
    perusahaan: Optional[Sequence[str]] = None,
    lokasi: Optional[Sequence[str]] = None,
    sektor: Optional[Sequence[str]] = None,
    min_ar: Optional[float] = None,
    max_ar: Optional[float] = None,
    min_pelamar: Optional[int] = None,
    max_pelamar: Optional[int] = None,
    min_kuota: Optional[int] = None,
    max_kuota: Optional[int] = None,
    sort: str = "recent"
):
    where = ["1=1"]
    params = {}
    if query:
        where.append("(LOWER(judul) LIKE :q OR LOWER(perusahaan) LIKE :q)")
        params["q"] = f"%{query.lower()}%"

    def add_in(field: str, values: Optional[Sequence[str]], key_prefix: str):
        if values:
            vals = [v for v in values if (v is not None and str(v).strip() != "")]
            if vals:
                placeholders = []
                for i, v in enumerate(vals):
                    k = f"{key_prefix}{i}"
                    placeholders.append(f":{k}")
                    params[k] = v
                where.append(f"{field} IN ({', '.join(placeholders)})")

    add_in("perusahaan", perusahaan, "perusahaan_")
    add_in("lokasi", lokasi, "lokasi_")

    if sektor:
        like_parts = []
        for i, v in enumerate([s for s in sektor if s and str(s).strip() != ""]):
            k = f"sektor_like_{i}"
            like_parts.append(f"LOWER(sektor) LIKE :{k}")
            params[k] = f"%{str(v).lower()}%"
        if like_parts:
            where.append("(" + " OR ".join(like_parts) + ")")

    if min_ar is not None:
        where.append("acceptance_rate >= :min_ar"); params["min_ar"] = min_ar
    if max_ar is not None:
        where.append("acceptance_rate <= :max_ar"); params["max_ar"] = max_ar
    if min_pelamar is not None:
        where.append("pelamar >= :min_pelamar"); params["min_pelamar"] = min_pelamar
    if max_pelamar is not None:
        where.append("pelamar <= :max_pelamar"); params["max_pelamar"] = max_pelamar
    if min_kuota is not None:
        where.append("kuota >= :min_kuota"); params["min_kuota"] = min_kuota
    if max_kuota is not None:
        where.append("kuota <= :max_kuota"); params["max_kuota"] = max_kuota

    USE_PG = bool(settings.DATABASE_URL)
    sort_recent = "fetched_at DESC" if USE_PG else "datetime(fetched_at) DESC"
    sort_map = {
        "recent": sort_recent,
        "ar_desc": "acceptance_rate DESC",
        "ar_asc": "acceptance_rate ASC",
        "pelamar_desc": "pelamar DESC",
        "pelamar_asc": "pelamar ASC",
        "kuota_desc": "kuota DESC",
        "kuota_asc": "kuota ASC",
    }
    order = sort_map.get(sort, sort_map["recent"])
    offset = (page - 1) * page_size

    with get_conn(settings.DB_PATH) as conn:
        cur = conn.cursor()
        # ⚠️ pakai alias agar key di dict_row konsisten
        total_q = f"SELECT COUNT(*) AS cnt FROM lowongan WHERE {' AND '.join(where)}"
        cur.execute(total_q, params)
        total = _read_count_row(cur.fetchone())

        q = f"SELECT * FROM lowongan WHERE {' AND '.join(where)} ORDER BY {order} LIMIT :limit OFFSET :offset"
        cur.execute(q, {**params, "limit": page_size, "offset": offset})
        rows = [dict(r) for r in cur.fetchall()]
        return rows, total


def list_perusahaan(sort: str = "ar_desc", page: int = 1, page_size: int = 50):
    sort_map = {
        "ar_desc": "ar_rata2 DESC",
        "ar_asc": "ar_rata2 ASC",
        "pelamar_desc": "pelamar_total DESC",
        "pelamar_asc": "pelamar_total ASC",
        "kuota_desc": "kuota_total DESC",
        "kuota_asc": "kuota_total ASC",
        "aktif_desc": "n_lowongan_aktif DESC",
        "aktif_asc": "n_lowongan_aktif ASC",
    }
    order = sort_map.get(sort, sort_map["ar_desc"])
    offset = (page - 1) * page_size

    with get_conn(settings.DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) AS cnt FROM perusahaan")
        total = _read_count_row(cur.fetchone())

        q = f"SELECT * FROM perusahaan ORDER BY {order} LIMIT :limit OFFSET :offset"
        cur.execute(q, {"limit": page_size, "offset": offset})
        rows = [dict(r) for r in cur.fetchall()]
        return rows, total
    
    
# === Distinct options for dropdowns (lokasi, sektor, perusahaan) ===
def _read_scalar(row, key_or_idx=0):
    """
    Ambil nilai kolom tunggal dari row (kompatibel sqlite Row / tuple / psycopg dict_row).
    """
    # psycopg dict_row / dict-like
    if hasattr(row, "get"):
        if isinstance(key_or_idx, str) and row.get(key_or_idx) is not None:
            return row.get(key_or_idx)
        # fallback: ambil nilai pertama
        try:
            return next(iter(row.values()))
        except Exception:
            pass
    # sqlite Row / tuple / list
    try:
        return row[key_or_idx]
    except Exception:
        try:
            return list(row)[0]
        except Exception:
            return None


def list_distinct_options():
    """
    Kembalikan daftar unik untuk dropdown:
    - perusahaan: DISTINCT perusahaan
    - lokasi    : DISTINCT lokasi
    - sektor    : split ';' dari semua baris yang punya sektor
    """
    with get_conn(settings.DB_PATH) as conn:
        cur = conn.cursor()

        # Perusahaan
        cur.execute("SELECT DISTINCT perusahaan FROM lowongan WHERE perusahaan IS NOT NULL AND perusahaan <> ''")
        perusahaan = sorted({str(_read_scalar(r, "perusahaan") or _read_scalar(r, 0)).strip()
                             for r in cur.fetchall() if _read_scalar(r, "perusahaan") or _read_scalar(r, 0)})

        # Lokasi
        cur.execute("SELECT DISTINCT lokasi FROM lowongan WHERE lokasi IS NOT NULL AND lokasi <> ''")
        lokasi = sorted({str(_read_scalar(r, "lokasi") or _read_scalar(r, 0)).strip()
                         for r in cur.fetchall() if _read_scalar(r, "lokasi") or _read_scalar(r, 0)})

        # Sektor / Program Studi (split ';')
        cur.execute("SELECT sektor FROM lowongan WHERE sektor IS NOT NULL AND sektor <> ''")
        sektor_tokens = set()
        for r in cur.fetchall():
            val = _read_scalar(r, "sektor") or _read_scalar(r, 0)
            if not val:
                continue
            for tok in str(val).split(";"):
                t = tok.strip()
                if t:
                    sektor_tokens.add(t)
        sektor = sorted(sektor_tokens)

    return {
        "perusahaan": perusahaan,
        "lokasi": lokasi,
        "sektor": sektor,
    }

# === OPTIONS untuk dropdown (lokasi, sektor/prodi, perusahaan) ===
def list_options():
    lokasi_set = set()
    sektor_set = set()
    perusahaan_set = set()

    with get_conn(settings.DB_PATH) as conn:
        cur = conn.cursor()

        # Lokasi (distinct)
        cur.execute("SELECT DISTINCT lokasi FROM lowongan WHERE lokasi IS NOT NULL AND TRIM(lokasi) <> ''")
        for r in cur.fetchall():
            v = (r["lokasi"] if isinstance(r, dict) else r[0]) or ""
            v = str(v).strip()
            if v:
                lokasi_set.add(v.upper())

        # Perusahaan (distinct)
        cur.execute("SELECT DISTINCT perusahaan FROM lowongan WHERE perusahaan IS NOT NULL AND TRIM(perusahaan) <> ''")
        for r in cur.fetchall():
            v = (r["perusahaan"] if isinstance(r, dict) else r[0]) or ""
            v = str(v).strip()
            if v:
                perusahaan_set.add(v)

        # Sektor / Program Studi: simpan “A; B; C” → pecah jadi item
        cur.execute("SELECT sektor FROM lowongan WHERE sektor IS NOT NULL AND TRIM(sektor) <> ''")
        for r in cur.fetchall():
            s = (r["sektor"] if isinstance(r, dict) else r[0]) or ""
            for part in str(s).split(";"):
                p = part.strip()
                if p:
                    sektor_set.add(p)

    # urutkan biar rapi/terprediksi
    lokasi = sorted(lokasi_set)
    sektor = sorted(sektor_set)
    perusahaan = sorted(perusahaan_set)
    return {"lokasi": lokasi, "sektor": sektor, "perusahaan": perusahaan}``` 

8. backend/schema_postgres.sql = ```
-- backend/schema_postgres.sql

-- Struktur untuk Postgres (Neon)
CREATE TABLE IF NOT EXISTS lowongan (
  id SERIAL PRIMARY KEY,
  external_id TEXT UNIQUE,
  source_url TEXT UNIQUE,
  judul TEXT,
  perusahaan TEXT,
  lokasi TEXT,
  sektor TEXT,
  tanggal_posting DATE,
  pelamar INTEGER,
  kuota INTEGER,
  acceptance_rate DOUBLE PRECISION,
  demand_ratio DOUBLE PRECISION,
  velocity_pelamar_per_day DOUBLE PRECISION,
  status TEXT,
  deskripsi_short TEXT,
  fetched_at TIMESTAMPTZ,
  content_hash TEXT
);

CREATE TABLE IF NOT EXISTS perusahaan (
  id SERIAL PRIMARY KEY,
  nama TEXT UNIQUE,
  lokasi TEXT,
  sektor TEXT,
  n_lowongan_aktif INTEGER,
  kuota_total INTEGER,
  pelamar_total INTEGER,
  ar_rata2 DOUBLE PRECISION,
  dr_rata2 DOUBLE PRECISION,
  source_url TEXT,
  fetched_at TIMESTAMPTZ
);

CREATE TABLE IF NOT EXISTS site_stats (
  id INTEGER PRIMARY KEY,
  jumlah_perusahaan INTEGER,
  jumlah_lamaran INTEGER,
  total_lowongan INTEGER,
  fetched_at TIMESTAMPTZ
);
INSERT INTO site_stats(id) VALUES(1)
ON CONFLICT (id) DO NOTHING;

CREATE TABLE IF NOT EXISTS program_timeline (
  id SERIAL PRIMARY KEY,
  batch TEXT,
  title TEXT,
  start_date DATE,
  end_date DATE,
  status TEXT,
  order_index INTEGER DEFAULT 0
);

CREATE INDEX IF NOT EXISTS idx_lowongan_company ON lowongan(perusahaan);
CREATE INDEX IF NOT EXISTS idx_lowongan_ar ON lowongan(acceptance_rate);
CREATE INDEX IF NOT EXISTS idx_lowongan_loc ON lowongan(lokasi); 
```

9. backend/schema.sql = ```
PRAGMA journal_mode=WAL;

CREATE TABLE IF NOT EXISTS lowongan (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  external_id TEXT UNIQUE,
  source_url TEXT UNIQUE,
  judul TEXT,
  perusahaan TEXT,
  lokasi TEXT,
  sektor TEXT,
  tanggal_posting TEXT,
  pelamar INTEGER,
  kuota INTEGER,
  acceptance_rate REAL,
  demand_ratio REAL,
  velocity_pelamar_per_day REAL,
  status TEXT,
  deskripsi_short TEXT,
  fetched_at TEXT,
  content_hash TEXT
);

CREATE TABLE IF NOT EXISTS perusahaan (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  nama TEXT UNIQUE,
  lokasi TEXT,
  sektor TEXT,
  n_lowongan_aktif INTEGER,
  kuota_total INTEGER,
  pelamar_total INTEGER,
  ar_rata2 REAL,
  dr_rata2 REAL,
  source_url TEXT,
  fetched_at TEXT
);

-- NEW: stats beranda + total lowongan
CREATE TABLE IF NOT EXISTS site_stats (
  id INTEGER PRIMARY KEY CHECK (id = 1),
  jumlah_perusahaan INTEGER,
  jumlah_lamaran INTEGER,
  total_lowongan INTEGER,
  fetched_at TEXT
);
INSERT OR IGNORE INTO site_stats(id) VALUES(1);

-- NEW: timeline program
CREATE TABLE IF NOT EXISTS program_timeline (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  batch TEXT,
  title TEXT,
  start_date TEXT,
  end_date TEXT,
  status TEXT,
  order_index INTEGER DEFAULT 0
);

CREATE INDEX IF NOT EXISTS idx_lowongan_company ON lowongan(perusahaan);
CREATE INDEX IF NOT EXISTS idx_lowongan_ar ON lowongan(acceptance_rate);
CREATE INDEX IF NOT EXISTS idx_lowongan_loc ON lowongan(lokasi);``` 

10. backend/settings.py = ```
# backend/settings.py
from dotenv import load_dotenv
# Baca .env dari CWD (root project) lebih dulu
load_dotenv()

from pydantic import BaseModel
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent
# (opsional) jika ada backend/.env juga ikut dibaca tanpa menimpa yg sudah ada
load_dotenv(BASE_DIR / ".env")

def _as_bool(v: str, default=False) -> bool:
    if v is None:
        return default
    return str(v).strip().lower() in {"1", "true", "yes", "y", "on"}

def _sanitize_ua(ua: str) -> str:
    if not ua:
        return ua
    ua = ua.strip()
    if (ua.startswith('"') and ua.endswith('"')) or (ua.startswith("'") and ua.endswith("'")):
        ua = ua[1:-1]
    return ua

class Settings(BaseModel):
    BASE_URL: str = os.getenv("BASE_URL", "https://maganghub.kemnaker.go.id/lowongan")

    # sqlite fallback path (diabaikan bila DATABASE_URL ada)
    DB_PATH: str = os.getenv(
        "DB_PATH",
        os.path.abspath(os.path.join(os.path.dirname(__file__), "data.sqlite"))
    )

    # Postgres (Neon) URL
    DATABASE_URL: str | None = os.getenv("DATABASE_URL")

    USER_AGENT: str = _sanitize_ua(os.getenv("USER_AGENT", "MagangPulse/1.0 (+https://example.local)"))
    REQUEST_TIMEOUT: int = int(os.getenv("REQUEST_TIMEOUT", "20"))
    THROTTLE_SECONDS: float = float(os.getenv("THROTTLE_SECONDS", "1.0"))
    MAX_PAGES: int = int(os.getenv("MAX_PAGES", "20"))
    USE_PLAYWRIGHT: bool = _as_bool(os.getenv("USE_PLAYWRIGHT"), default=False)

    # ==== ⬇️ Tambahan yang dipakai di enrichment/listing detail ====
    DETAIL_ENRICH: bool = _as_bool(os.getenv("DETAIL_ENRICH"), default=True)
    DETAIL_MAX: int = int(os.getenv("DETAIL_MAX", "400"))
    DETAIL_WORKERS: int = int(os.getenv("DETAIL_WORKERS", "6"))
    # opsional: kalau mau pakai browser khusus untuk halaman detail
    USE_PLAYWRIGHT_DETAIL: bool = _as_bool(
        os.getenv("USE_PLAYWRIGHT_DETAIL"),
        # fallback ke USE_PLAYWRIGHT bila tidak diset
        default=_as_bool(os.getenv("USE_PLAYWRIGHT"), False))

settings = Settings()``` 

11. frontend/app.js = ```
// frontend/app.js

// --- API base robust (mendukung file:// dan port random DevServer) ---
const ORIGIN_OK =
  typeof location !== "undefined" &&
  location.origin &&
  location.origin !== "null" &&
  !location.origin.startsWith("file");
const API_BASE = (ORIGIN_OK ? location.origin : "http://127.0.0.1:8000")
  .replace(/:\d+$/, ":8000");

// ========= Utilities =========
const $  = (sel) => document.querySelector(sel);
const $$ = (sel) => Array.from(document.querySelectorAll(sel));
const pct = (x) => (x == null ? "—" : (x * 100).toFixed(1) + "%");
const num = (x) => (x == null || isNaN(Number(x)) ? "—" : Number(x).toLocaleString("id-ID"));
function debounce(fn, ms=250){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a), ms); }; }



// ========= Mini component: MultiSelect (dropdown + checkbox) =========
function createMultiSelect(rootId, { placeholder="Pilih", onChange } = {}){
  const root = document.getElementById(rootId);
  if (!root) return null;
  root.classList.add("ms");
  const tpl = `
    <button type="button" class="ms-btn">
      <span class="ms-label text-sm text-zinc-400">${placeholder}</span>
      <svg width="18" height="18" viewBox="0 0 24 24" class="opacity-80"><path fill="currentColor" d="M7 10l5 5 5-5z"/></svg>
    </button>
    <div class="ms-panel">
      <input type="text" class="ms-search inp" placeholder="Cari...">
      <div class="ms-list"></div>
    </div>`;
  root.innerHTML = tpl;
  const btn   = root.querySelector(".ms-btn");
  const panel = root.querySelector(".ms-panel");
  const list  = root.querySelector(".ms-list");
  const search= root.querySelector(".ms-search");
  let options = [];   // [{value,label}]
  let picked  = new Set();

  function renderList(){
    const q = (search.value||"").toLowerCase();
    const items = options.filter(o => o.label.toLowerCase().includes(q));
    list.innerHTML = items.map(o=>`
      <label class="ms-item">
        <input type="checkbox" value="${o.value}" ${picked.has(o.value)?"checked":""}>
        <span class="text-sm">${o.label}</span>
      </label>`).join("") || `<div class="text-xs text-zinc-500 p-2">Tidak ada opsi.</div>`;
    list.querySelectorAll("input[type=checkbox]").forEach(cb=>{
      cb.addEventListener("change", ()=>{
        if (cb.checked) picked.add(cb.value); else picked.delete(cb.value);
        updateLabel(); if (onChange) onChange(getSelected());
      });
    });
  }
  function updateLabel(){
    const lab = root.querySelector(".ms-label");
    if (picked.size===0){ lab.textContent = placeholder; lab.classList.add("text-zinc-400"); return; }
    const sample = options.filter(o=>picked.has(o.value)).slice(0,2).map(o=>o.label);
    lab.classList.remove("text-zinc-400");
    lab.innerHTML = `<div class="ms-tags">
      ${sample.map(s=>`<span class="ms-tag">${s}</span>`).join("")}
      ${picked.size>2 ? `<span class="ms-tag">+${picked.size-2}</span>` : ""}
    </div>`;
  }
  function setOptions(arr){
    // arr: array of strings (unique)
    options = (arr||[]).map(v=>({ value:String(v), label:String(v) }));
    options.sort((a,b)=>a.label.localeCompare(b.label));
    renderList(); updateLabel();
  }
  function getSelected(){ return Array.from(picked.values()); }
  function clear(){ picked.clear(); search.value=""; renderList(); updateLabel(); }

  // events
  btn.addEventListener("click", (e)=>{ e.stopPropagation(); root.classList.toggle("open"); search.focus(); });
  document.addEventListener("click", (e)=>{
    if (!root.contains(e.target)) root.classList.remove("open");
  });
  search.addEventListener("input", debounce(renderList, 120));

  return { setOptions, getSelected, clear };
}







// ========= Countdown (deadline: 15 Oct 2025 23:59 WIB) =========
function startCountdown() {
  const deadline = new Date("2025-10-15T23:59:00+07:00").getTime();
  const el = $("#countdown");
  if (!el) return;
  const tick = () => {
    const now = Date.now(); let dist = Math.max(0, deadline - now);
    const d = Math.floor(dist / 86400000);
    const h = Math.floor((dist / 3600000) % 24);
    const m = Math.floor((dist / 60000) % 60);
    const s = Math.floor((dist / 1000) % 60);
    el.textContent = `${d} hari, ${h} jam, ${m} menit, ${s} detik`;
  };
  tick(); setInterval(tick, 1000);
}

// ========= Global State (untuk pagination & filter) =========
let STATE = {
  page: 1,
  page_size: 20,
  total: 0,
  sort: "recent",
  q: "",
  lokasi: [],       // multi-select
  sektor: [],       // multi-select
  perusahaan: [],   // multi-select
  min_ar: null,
  max_ar: null,
};

// refs komponen multi-select
let msLokasi, msSektor, msPerusahaan;

// ========= Home (stat + timeline) =========
async function loadHome() {
  const url = `${API_BASE}/api/home`;
  let res;
  try{
    res = await fetch(url, { cache: "no-store" });
  }catch(e){
    console.error("Home fetch error:", e);
    renderTimeline([]);
    return;
  }
  if (!res.ok) {
    console.error("Home fetch failed:", res.status, res.statusText, url);
    renderTimeline([]);
    return;
  }
  const { stats, timeline } = await res.json();

  if (stats) {
    $("#stat-perusahaan") && ($("#stat-perusahaan").textContent = num(stats.jumlah_perusahaan));
    $("#stat-lamaran") && ($("#stat-lamaran").textContent    = num(stats.jumlah_lamaran));
    $("#stat-lowongan") && ($("#stat-lowongan").textContent   = num(stats.total_lowongan));
    const ts = stats.fetched_at ? new Date(stats.fetched_at).toLocaleString("id-ID") : "";
    $("#home-snapshot") && ($("#home-snapshot").textContent = ts);
    const par = document.querySelector("section.p-5 p.text-xs");
    if (par){
      par.innerHTML = `Data diperoleh langsung dari scraping website MagangHub dan disajikan ulang sebagai API oleh <span class="font-medium text-zinc-300">MagangPulse</span> (<span class="font-medium">MagangPulse API v1.1.0</span>). Snapshot terakhir: <span class="font-medium">${ts || "—"}</span>.`;
    }
  }
  renderTimeline(timeline || []);
}

function renderTimeline(items) {
  const host = $("#timeline");
  if(!host) return;
  host.innerHTML = "";
  items.forEach((it) => {
    const div = document.createElement("div");
    div.className = `p-4 rounded-2xl bg-zinc-900/60 card timeline-card ${it.status==='active' ? 'active' : ''}`;
    const badge = it.batch ? `<span class="text-xs text-violet-400">${it.batch}</span>` : "";
    const date  = (it.start_date || "") + (it.end_date ? ` → ${it.end_date}` : "");
    div.innerHTML = `
      <div class="flex items-start justify-between">
        <div class="text-sm text-zinc-400">${badge}</div>
        <div class="text-xs text-zinc-500">${it.status || ""}</div>
      </div>
      <div class="mt-1 font-semibold">${it.title || "—"}</div>
      <div class="text-sm text-zinc-400 mt-1">${date}</div>`;
    host.appendChild(div);
  });
}

// ========= Jobs (server-side pagination) =========
function paramsFromState(){
  const p = new URLSearchParams();
  p.set("page", String(STATE.page));
  p.set("page_size", String(STATE.page_size));
  p.set("sort", STATE.sort || "recent");
  if (STATE.q) p.set("query", STATE.q);
  // multi: kirim berulang key=val
  (STATE.lokasi||[]).forEach(v => p.append("lokasi", v));
  (STATE.sektor||[]).forEach(v => p.append("sektor", v));
  (STATE.perusahaan||[]).forEach(v => p.append("perusahaan", v));
  if (STATE.min_ar != null && STATE.min_ar !== "") p.set("min_ar", STATE.min_ar);
  if (STATE.max_ar != null && STATE.max_ar !== "") p.set("max_ar", STATE.max_ar);
  return p;
}

async function fetchJobsPage(){
  const host = $("#jobs");
  if (!host) return;
  host.innerHTML = `<div class="text-sm text-zinc-400">Memuat…</div>`;

  const url = `${API_BASE}/api/lowongan?` + paramsFromState().toString();

  // robust fetch + retry
  let tries = 0, res, json, lastErr;
  while (tries < 3){
    tries++;
    try{
      res = await fetch(url, { cache: "no-store" });
      if(!res.ok) throw new Error(`HTTP ${res.status}`);
      json = await res.json(); break;
    }catch(e){
      lastErr = e; await new Promise(r=>setTimeout(r, 250*tries));
    }
  }
  if(!json){
    console.error("Fetch gagal:", lastErr);
    host.innerHTML = `<div class="text-sm text-red-400">Gagal memuat data.</div>`;
    return;
  }

  const rows = json.data || [];
  STATE.total = json.total ?? 0;
  renderJobs(rows);
  renderPager();
}

function renderJobs(rows){
  const host = $("#jobs");
  if (!host) return;
  host.innerHTML = "";
  if (!rows.length){
    host.innerHTML = '<div class="text-sm text-zinc-400">Tidak ada data yang cocok.</div>';
    return;
  }
  rows.forEach(r=>{
    const card = document.createElement("div");
    card.className = "job-card rounded-2xl border border-zinc-800 bg-zinc-900/60 p-4";
    card.innerHTML = `
      <div>
        <div class="text-lg font-semibold title mb-1">${r.judul || "—"}</div>
        <div class="text-sm text-zinc-400 company mb-2">${r.perusahaan || "—"}</div>
        <div class="text-xs text-zinc-500 meta mb-3">
          <span class="text-zinc-400">Penempatan Kerja:</span> ${(r.lokasi||"—").toUpperCase()}
        </div>
        <div class="grid grid-cols-2 gap-2">
          <div class="rounded-xl bg-zinc-900 border border-zinc-800 p-3">
            <div class="text-xs text-zinc-400">Peluang</div>
            <div class="text-base font-semibold">${pct(r.acceptance_rate)}</div>
          </div>
          <div class="rounded-xl bg-zinc-900 border border-zinc-800 p-3">
            <div class="text-xs text-zinc-400">Pelamar/Kuota</div>
            <div class="text-base font-semibold">${num(r.pelamar)}/${num(r.kuota)}</div>
          </div>
        </div>
      </div>
      ${r.tanggal_posting ? `<div class="mt-3 text-[11px] text-zinc-500">Posting: ${r.tanggal_posting}</div>` : ""}
      <div class="job-footer mt-3">
        <a href="${r.source_url || "#"}" target="_blank" rel="noopener"
          class="inline-flex w-full items-center justify-center rounded-xl px-4 py-2 text-sm font-medium
                  text-white bg-gradient-to-r from-violet-600 to-blue-600 hover:from-violet-500 hover:to-blue-500">
          Lihat detail lowongan →
        </a>
      </div>`;
    host.appendChild(card);
  });
}

function renderPager(){
  const pager = $("#pager");
  if (!pager) return;
  pager.innerHTML = "";
  const totalPages = Math.max(1, Math.ceil(STATE.total / STATE.page_size));
  const cp = STATE.page;

  // wrapper
  const bar = document.createElement("div");
  bar.className = "flex flex-wrap md:flex-nowrap justify-center items-center gap-4 p-4 font-sans text-zinc-200";

  const group = document.createElement("div");
  group.className = "flex flex-wrap justify-center items-center gap-2";

  const makeBtn = (label, page, disabled=false, active=false) => {
    const b = document.createElement("button");
    b.textContent = label;
    b.className =
      "px-3 py-2 rounded-xl border border-zinc-800 text-sm transition " +
      (active ? "bg-blue-900 text-white" : "hover:bg-zinc-800");
    if (disabled) {
      b.className += " opacity-50 cursor-not-allowed";
    } else {
      b.addEventListener("click", ()=>{
        if (page===STATE.page) return;
        STATE.page = page; fetchJobsPage();
      });
    }
    return b;
  };

  // Sebelumnya
  group.appendChild(makeBtn("Sebelumnya", Math.max(1, cp-1), cp<=1, false));

  // halaman 1..5 … last
  const tp = totalPages;
  const firstPages = [1,2,3,4,5].filter(p => p<=tp);
  const lastPage = tp;

  let lastAdded = 0;
  const addPage = (p)=>{
    if (p<1 || p>tp) return;
    if (lastAdded && p-lastAdded>1) {
      const ell = document.createElement("span");
      ell.textContent = "…";
      ell.className = "px-2 text-zinc-400";
      group.appendChild(ell);
    }
    group.appendChild(makeBtn(String(p), p, false, p===cp));
    lastAdded = p;
  };

  firstPages.forEach(addPage);
  if (tp > 5) addPage(tp);

  // Berikutnya
  group.appendChild(makeBtn("Berikutnya", Math.min(tp, cp+1), cp>=tp, false));

  // meta "Halaman X dari Y"
  const meta = document.createElement("div");
  meta.className = "text-xs text-zinc-400";
  meta.textContent = `Halaman ${cp} dari ${tp}`;

  bar.appendChild(group);
  bar.appendChild(meta);

  // separator line di atas pagination
  const wrap = document.createElement("div");
  wrap.className = "mt-4 pt-4 border-t border-zinc-800/80"; // garis tipis elegan
  wrap.appendChild(bar);
  pager.appendChild(wrap);}

// ========= (Opsional) kumpulkan opsi dropdown dari sampel halaman =========
// Catatan: hanya buat bantu isi <select> provinsi/sektor/perusahaan, bukan untuk render utama
async function fetchSomeJobsForOptions(maxPages=3, pageSize=100){
  const uniq = new Set();
  const rows = [];
  let page = 1, total = Infinity;
  while (page <= maxPages && (page-1)*pageSize < total){
    const p = new URLSearchParams();
    p.set("page", String(page));
    p.set("page_size", String(pageSize));
    p.set("sort", "recent");
    const res = await fetch(`${API_BASE}/api/lowongan?`+p.toString(), { cache:"no-store" });
    if(!res.ok) break;
    const j = await res.json();
    total = j.total ?? 0;
    (j.data||[]).forEach(r=>{
      const key = (r.perusahaan||"")+"|"+(r.lokasi||"")+"|"+(r.sektor||"");
      if (!uniq.has(key)){ uniq.add(key); rows.push(r); }
    });
    if (!(j.data||[]).length) break;
    page++;
  }
  return rows;
}

function fillDropdownsFromRows(rows){
  const provinces = new Set(), sectors = new Set(), companies = new Set();
  rows.forEach(r=>{
    if (r.lokasi) provinces.add(String(r.lokasi||"").toUpperCase());
    if (r.sektor){
      // r.sektor bisa "Teknik Sipil; Teknik Industri; Akuntansi"
      String(r.sektor).split(";").map(s=>s.trim()).filter(Boolean).forEach(s=>sectors.add(s));
    }    if (r.perusahaan) companies.add(String(r.perusahaan||""));
  });
  msLokasi?.setOptions([...provinces]);
  msSektor?.setOptions([...sectors]);
  msPerusahaan?.setOptions([...companies]);
}

// ========= Companies (ringkas) =========
async function loadCompanies(){
  const mapSort = (k, ord) => {
    if (k==="aktif") return ord==="asc" ? "aktif_asc" : "aktif_desc";
    if (k==="kuota") return ord==="asc" ? "kuota_asc" : "kuota_desc";
    // default AR
    return ord==="asc" ? "ar_asc" : "ar_desc";
  };
  const k = $("#co-sort")?.value || "ar";
  const ord = $("#co-order")?.value || "desc";
  const sort = mapSort(k, ord);
  try{
    const res = await fetch(`${API_BASE}/api/perusahaan?sort=${encodeURIComponent(sort)}&page=1&page_size=15`, { cache:"no-store" });
    const json = await res.json();
    const host = $("#companies");
    if (!host) return;
    host.innerHTML = "";
    (json.data || []).forEach(it=>{
      const div = document.createElement("div");
      div.className = "rounded-xl bg-zinc-900/60 border border-zinc-800 p-3";
      div.innerHTML = `
        <div class="text-sm font-medium">${it.nama || "—"}</div>
        <div class="text-xs text-zinc-500 mt-1">
          AR rata-rata: <span class="font-semibold">${pct(it.ar_rata2)}</span>
          • Aktif: ${num(it.n_lowongan_aktif)}
          • Kuota: ${num(it.kuota_total)}
        </div>`;
      host.appendChild(div);
    });
  } catch(e){
    console.error(e);
  }
}

// ========= Export XLSX (ambil semua halaman bertahap) =========
async function exportXLSX(){
  const all = [];
  // ambil snapshot filter saat ini
  const snap = { ...STATE };
  let page = 1, total = Infinity;

  while ((page-1)*100 < total){
    const p = new URLSearchParams();
    p.set("page", String(page)); p.set("page_size", "100");
    p.set("sort", snap.sort || "recent");
    if (snap.q) p.set("query", snap.q);
    if (snap.lokasi) p.set("lokasi", snap.lokasi);
    if (snap.sektor) p.set("sektor", snap.sektor);
    if (snap.perusahaan) p.set("perusahaan", snap.perusahaan);
    if (snap.min_ar != null && snap.min_ar!=="") p.set("min_ar", snap.min_ar);
    if (snap.max_ar != null && snap.max_ar!=="") p.set("max_ar", snap.max_ar);

    const res = await fetch(`${API_BASE}/api/lowongan?`+p.toString(), { cache:"no-store" });
    const j = await res.json();
    total = j.total ?? 0;
    (j.data||[]).forEach(r=>all.push(r));
    if (!(j.data||[]).length) break;
    page++;
  }

  const rows = all.map(r=>({
    Judul: r.judul,
    Perusahaan: r.perusahaan,
    Lokasi: r.lokasi,
    "Program Studi": r.sektor,          // kini terisi hasil enrichment
    "Tanggal Posting": r.tanggal_posting,
    Pelamar: r.pelamar,
    Kuota: r.kuota,
    "Acceptance Rate": r.acceptance_rate,
    "Demand Ratio": r.demand_ratio,
    URL: r.source_url
  }));
  const ws = XLSX.utils.json_to_sheet(rows);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "Lowongan");
  XLSX.writeFile(wb, "magangpulse_lowongan.xlsx");
}

// ========= Init =========
window.addEventListener("DOMContentLoaded", async () => {
  startCountdown();
  loadHome();
  loadCompanies();

  // init komponen multi-select
  msLokasi = createMultiSelect("ms-lokasi",  { placeholder: $("#ms-lokasi")?.dataset?.placeholder || "Provinsi (Semua)"});
  msSektor = createMultiSelect("ms-sektor",  { placeholder: $("#ms-sektor")?.dataset?.placeholder || "Program Studi (Semua)"});
  msPerusahaan = createMultiSelect("ms-perusahaan", { placeholder: $("#ms-perusahaan")?.dataset?.placeholder || "Perusahaan (Semua)"});



  // handler filter internal perusahaan
  $("#co-sort")?.addEventListener("change", loadCompanies);
  $("#co-order")?.addEventListener("change", loadCompanies);

  // set awal page size dari UI (default 20)
  const psEl = $("#page_size");
  STATE.page_size = parseInt(psEl?.value || "20", 10);
  STATE.page = 1;

  // Initial fetch page 1 (langsung tampil data)
  await fetchJobsPage();

  // Isi dropdown (opsional) dari sampel beberapa halaman agar ada pilihan
  await loadOptions();

  // Tombol Terapkan
  $("#btnApply")?.addEventListener("click", ()=>{
    STATE.page = 1;
    STATE.sort = $("#sort")?.value || "recent";
    // ambil values dari komponen custom
    STATE.lokasi = msLokasi?.getSelected() || [];
    STATE.sektor = msSektor?.getSelected() || [];
    STATE.perusahaan = msPerusahaan?.getSelected() || [];
    STATE.min_ar = $("#min_ar")?.value;
    STATE.max_ar = $("#max_ar")?.value;
    fetchJobsPage();
  });

  // Tombol Reset
  $("#btnReset")?.addEventListener("click", ()=>{
    ["q","min_ar","max_ar"].forEach(id=>{ const el=$("#"+id); if(el) el.value=""; });
    // kosongkan komponen custom
    msLokasi?.clear(); msSektor?.clear(); msPerusahaan?.clear();
    $("#sort") && ($("#sort").value = "recent");
    $("#page_size") && ($("#page_size").value = "20");
    STATE = { page:1, page_size:25, total:0, sort:"recent", q:"", lokasi:[], sektor:[], perusahaan:[], min_ar:null, max_ar:null };
    fetchJobsPage();
  });

  // Streaming search (≥3 huruf → langsung query). Kosong → tampil semua.
  $("#q")?.addEventListener("input", debounce(()=>{
    const v = ($("#q").value || "").trim();
    STATE.q = v.length >= 3 ? v : "";
    STATE.page = 1;
    fetchJobsPage();
  }, 220));

  // Sort berubah
  $("#sort")?.addEventListener("change", ()=>{
    STATE.sort = $("#sort").value || "recent";
    STATE.page = 1; fetchJobsPage();
  });

  // Page size berubah
  $("#page_size")?.addEventListener("change", ()=>{
    STATE.page_size = parseInt($("#page_size").value, 10) || 25;
    STATE.page = 1; fetchJobsPage();
  });

  // Export
  $("#btn-export")?.addEventListener("click", exportXLSX);
});




// ========= Theme (dark/light) =========
(function initTheme(){
  const metaTheme = document.querySelector('meta[name="theme-color"]');

  function setTheme(mode){
    const isDark = mode === "dark";
    document.documentElement.classList.toggle("dark", isDark);
    document.documentElement.classList.toggle("light", !isDark);
    localStorage.setItem("theme", isDark ? "dark" : "light");
    if (metaTheme) metaTheme.setAttribute("content", isDark ? "#0a0a0a" : "#f8fafc");
    // toggle icons
    const sun = document.getElementById("icon-sun");
    const moon = document.getElementById("icon-moon");
    if (sun && moon){ sun.classList.toggle("hidden", isDark); moon.classList.toggle("hidden", !isDark); }
  }

  // initial: saved -> system -> dark default
  const saved = localStorage.getItem("theme");
  const prefersDark = window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
  setTheme(saved || (prefersDark ? "dark" : "light"));

  // handle button
  window.addEventListener("DOMContentLoaded", () => {
    const btn = document.getElementById("theme-toggle");
    if (btn){
      btn.addEventListener("click", () => {
        const nowDark = document.documentElement.classList.contains("dark");
        setTheme(nowDark ? "light" : "dark");
      });
    }
  });
})();


// ========= Options endpoint (lebih akurat & cepat) =========
async function loadOptions() {
  try {
    const res = await fetch(`${API_BASE}/api/options`, { cache: "no-store" });
    if (!res.ok) throw new Error("HTTP " + res.status);
    const j = await res.json();
    msLokasi?.setOptions(j.lokasi || []);
    msSektor?.setOptions(j.sektor || []);       // <-- Program Studi muncul dari sini
    msPerusahaan?.setOptions(j.perusahaan || []);
  } catch (e) {
    console.warn("Gagal /api/options, fallback ke sampling:", e);
    try {
      const sample = await fetchSomeJobsForOptions(3, 100);
      fillDropdownsFromRows(sample); // fallback lama
    } catch (err) {
      console.warn("Fallback sampling juga gagal:", err);
    }
  }
}``` 

12. frontend/index.html = ```
<!DOCTYPE html>
<html lang="id" class="dark">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>MagangPulse — Monitoring MagangHub Kemnaker</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- SheetJS untuk export XLSX -->
  <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
  <link rel="stylesheet" href="styles.css" />
  <link rel="icon" type="image/png" sizes="32x32" href="assets/Logo MagangPulse.png">
  <link rel="icon" type="image/png" sizes="192x192" href="assets/Logo MagangPulse.png">
  <link rel="apple-touch-icon" href="assets/Logo MagangPulse.png">
  <meta name="theme-color" content="#0a0a0a">
</head>
<body class="bg-zinc-950 text-zinc-200 min-h-screen">
  <!-- Header -->
  <header class="sticky top-0 z-10 backdrop-blur bg-zinc-950/80 border-b border-zinc-800">
    <div class="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
      <h1 class="text-xl font-bold tracking-tight">
        Magang<span class="text-violet-400">Pulse</span>
      </h1>

      <div class="flex items-center gap-3">
        <button id="btn-export"
          class="px-4 py-2 rounded-xl text-sm font-medium text-white bg-zinc-800 hover:bg-zinc-700">
          Export XLSX
        </button>

        <!-- NEW: Compare Jobs -->
        <a href="compare.html"
          class="px-4 py-2 rounded-xl text-sm font-medium text-white bg-zinc-800 hover:bg-zinc-700">
          Compare Jobs
        </a>

        <a id="cta-maganghub" href="https://maganghub.kemnaker.go.id/" target="_blank" rel="noopener"
          class="px-4 py-2 rounded-xl text-sm font-medium text-white
                bg-gradient-to-r from-violet-600 via-indigo-600 to-sky-500
                hover:from-violet-500 hover:to-sky-400">
          Kunjungi MagangHub
        </a>
      </div>


    <!-- Theme toggle -->
    <button id="theme-toggle"
      class="w-10 h-10 rounded-full border border-zinc-800/70 bg-zinc-900/40 hover:bg-zinc-800/60
            flex items-center justify-center transition"
      title="Ganti tema">
      <!-- Sun -->
      <svg id="icon-sun" xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 hidden" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <circle cx="12" cy="12" r="4" stroke-width="1.8"/>
        <path d="M12 2v2M12 20v2M4 12H2M22 12h-2M5 5l-1.5-1.5M20.5 20.5L19 19M5 19l-1.5 1.5M20.5 3.5L19 5" stroke-width="1.8"/>
      </svg>
      <!-- Moon -->
      <svg id="icon-moon" xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <path d="M21 12.8A8.5 8.5 0 1 1 11.2 3a7 7 0 0 0 9.8 9.8Z" stroke-width="1.8"/>
      </svg>
    </button>

    </div>
  </header>

  <main class="max-w-6xl mx-auto px-4 py-6 grid gap-8">
    <!-- HERO (welcoming) -->
    <section class="rounded-3xl border border-zinc-800 bg-zinc-900/60 p-6 md:p-10 relative overflow-hidden">
      <div class="absolute -top-16 -right-16 w-72 h-72 rounded-full bg-violet-700/10 blur-3xl"></div>
      <div class="absolute -bottom-10 -left-10 w-72 h-72 rounded-full bg-sky-600/10 blur-3xl"></div>

      <h2 class="text-2xl md:text-3xl font-extrabold">
        Selamat datang di <span class="text-violet-400">MagangPulse</span>
      </h2>
      <p class="mt-2 text-zinc-300 max-w-3xl">
        Mirror UI berbasis data publik MagangHub: jelajah lowongan, lihat peluang (Acceptance Rate),
        dan bandingkan perusahaan—semua dalam tema gelap yang elegan.
      </p>

      <!-- Fitur (1 baris, 4 kotak) -->
      <div class="grid grid-cols-2 md:grid-cols-4 gap-3 mt-6">
        <div class="p-4 rounded-2xl border border-zinc-800 bg-zinc-900/70">
          <div class="text-sm font-semibold">Peluang &amp; Statistik</div>
          <div class="text-xs text-zinc-400 mt-1">AR/DR dihitung otomatis.</div>
        </div>
        <div class="p-4 rounded-2xl border border-zinc-800 bg-zinc-900/70">
          <div class="text-sm font-semibold">Filter Komprehensif</div>
          <div class="text-xs text-zinc-400 mt-1">Provinsi, Prodi, Perusahaan.</div>
        </div>
        <div class="p-4 rounded-2xl border border-zinc-800 bg-zinc-900/70">
          <div class="text-sm font-semibold">Snapshot Ringan</div>
          <div class="text-xs text-zinc-400 mt-1">SQLite + FastAPI.</div>
        </div>
        <div class="p-4 rounded-2xl border border-zinc-800 bg-zinc-900/70">
          <div class="text-sm font-semibold">UI Compact</div>
          <div class="text-xs text-zinc-400 mt-1">Kartu ringkas mudah dibaca.</div>
        </div>
      </div>
    </section>

    <!-- STATS (center aligned) + COUNTDOWN -->
    <section class="grid sm:grid-cols-4 gap-4">
    <div class="stat-card p-6 rounded-2xl border border-zinc-800 bg-zinc-900/60 text-center">
      <div class="kpi-label text-sm text-zinc-300/90">Jumlah Perusahaan</div>
      <div id="stat-perusahaan" class="kpi-number text-3xl font-extrabold mt-1">—</div>
      </div>
    <div class="stat-card p-6 rounded-2xl border border-zinc-800 bg-zinc-900/60 text-center">
      <div class="kpi-label text-sm text-zinc-300/90">Jumlah Lamaran</div>
      <div id="stat-lamaran" class="kpi-number text-3xl font-extrabold mt-1">—</div>
      </div>
    <div class="stat-card p-6 rounded-2xl border border-zinc-800 bg-zinc-900/60 text-center">
      <div class="kpi-label text-sm text-zinc-300/90">Jumlah Lowongan</div>
      <div id="stat-lowongan" class="kpi-number text-3xl font-extrabold mt-1">—</div>
      </div>
    <div class="stat-card p-6 rounded-2xl border border-zinc-800 bg-zinc-900/60 text-center">
      <div class="kpi-label text-sm text-zinc-300/90">Hitung Mundur Pendaftaran</div>
      <div id="countdown" class="kpi-number text-lg font-semibold mt-1">—</div>
      </div>
    </section>

    <!-- Timeline -->
    <section class="p-5 rounded-2xl border border-zinc-800 bg-zinc-900/60">
      <div class="flex items-center justify-between">
        <h3 class="font-semibold">Jadwal Pelaksanaan Program Pemagangan</h3>
        <div id="home-snapshot" class="text-xs text-zinc-500"></div>
      </div>
      <div id="timeline" class="grid md:grid-cols-4 gap-4 mt-4"></div>

      <!-- Keterangan sumber data -->
      <p class="mt-4 text-xs text-zinc-500">
        Data diperoleh langsung dari scraping website MagangHub dan disajikan ulang sebagai API oleh <span class="font-medium text-zinc-300">MagangPulse</span>.
      </p>
    </section>

    <!-- Filters -->
    <section class="grid gap-4 p-4 rounded-2xl border border-zinc-800 bg-zinc-900/60">
      <!-- Baris 1: search + sort + page_size -->
      <div class="grid md:grid-cols-7 gap-3">
        <input id="q" type="text" placeholder="Cari judul/perusahaan"
              class="px-3 py-2 rounded-xl bg-zinc-900 border border-zinc-800 outline-none focus:ring-2 focus:ring-violet-500" />

        <input id="min_ar" type="number" step="0.01" min="0" max="1" placeholder="min AR"
              class="px-3 py-2 rounded-xl bg-zinc-900 border border-zinc-800" />
        <input id="max_ar" type="number" step="0.01" min="0" max="1" placeholder="max AR"
               class="px-3 py-2 rounded-xl bg-zinc-900 border border-zinc-800" />

        <select id="sort" class="px-3 py-2 rounded-xl bg-zinc-900 border border-zinc-800">
          <option value="recent">Terbaru</option>
          <option value="ar_desc">AR tertinggi</option>
          <option value="ar_asc">AR terendah</option>
          <option value="pelamar_desc">Pelamar terbanyak</option>
          <option value="pelamar_asc">Pelamar tersedikit</option>
          <option value="kuota_desc">Kuota terbesar</option>
          <option value="kuota_asc">Kuota terkecil</option>
        </select>
                <select id="page_size" class="px-3 py-2 rounded-xl bg-zinc-900 border border-zinc-800">
          <option value="10">10 / halaman</option>
          <option value="20">20 / halaman</option>
          <option value="25" selected>25 / halaman</option>
          <option value="50">50 / halaman</option>
          <option value="100">100 / halaman</option>
        </select>
      </div>


      <!-- Baris 2: multi-select filters (custom dropdown) -->
      <div class="grid md:grid-cols-3 gap-3">
        <div id="ms-lokasi" class="ms" data-placeholder="Provinsi (Semua)"></div>
        <div id="ms-sektor" class="ms" data-placeholder="Program Studi (Semua)"></div>
        <div id="ms-perusahaan" class="ms" data-placeholder="Perusahaan (Semua)"></div>
      </div>




      <!-- tombol di tengah -->
      <div class="flex items-center justify-center gap-3">
        <button id="btnApply"
          class="px-4 py-2 rounded-xl font-medium text-white
                 bg-gradient-to-r from-violet-600 via-indigo-600 to-sky-500
                 hover:from-violet-500 hover:to-sky-400">
          Terapkan
        </button>
        <button id="btnReset"
          class="px-4 py-2 rounded-xl bg-zinc-800 hover:bg-zinc-700">
          Reset
        </button>
      </div>
    </section>

    <!-- List + Companies -->
    <section class="grid md:grid-cols-3 gap-4">
      <div class="md:col-span-2 p-4 rounded-2xl border border-zinc-800 bg-zinc-900/60">
        <h2 class="font-semibold mb-3">Lowongan</h2>
        <!-- grid 3 kolom desktop -->
        <div id="jobs" class="grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3"></div>
        <div id="pager" class="flex items-center justify-center gap-1 mt-4"></div>

      </div>

      <div class="p-4 rounded-2xl border border-zinc-800 bg-zinc-900/60">
        <!-- Judul di atas -->
        <h2 class="font-semibold mb-2">TOP 15 Perusahaan (ringkas)</h2>
        <!-- Baris filter DI BAWAH judul -->
        <div class="flex flex-wrap items-center gap-2 mb-3">
          <span class="text-xs text-zinc-400">Urutkan:</span>
          <select id="co-sort" class="px-3 py-2 rounded-xl bg-zinc-900 border border-zinc-800 text-sm">
            <option value="ar">Top AR rata-rata</option>
            <option value="aktif">Top Aktif</option>
            <option value="kuota">Top Jumlah Lowongan</option>
          </select>
          <select id="co-order" class="px-3 py-2 rounded-xl bg-zinc-900 border border-zinc-800 text-sm">
            <option value="desc">Desc</option>
            <option value="asc">Asc</option>
          </select>
        </div>
        <div id="companies" class="grid gap-2"></div>
      </div>
    </section>
  </main>

  <footer class="py-6 text-center text-xs text-zinc-400 space-y-1">
    <div>
      Made with ❤ by
      <a href="https://www.instagram.com/rendika__07/?hl=en" target="_blank" class="underline hover:text-zinc-200">Rendika</a>
      • MagangPulse – Monitoring
      <a href="https://maganghub.kemnaker.go.id/" target="_blank" class="underline hover:text-zinc-200">MagangHub Kemnaker</a>
    </div>
    <div class="space-x-3">
      📍 Fresh Graduate from <a class="underline hover:text-zinc-200" target="_blank" href="https://surabaya.telkomuniversity.ac.id/">Telkom University Surabaya</a>
      • 💼 <a class="underline hover:text-zinc-200" target="_blank" href="https://www.linkedin.com/in/rendikanurhartanto-s">LinkedIn</a>
      • <a class="underline hover:text-zinc-200" target="_blank" href="https://github.com/Rendika7">GitHub</a>
      • <a class="underline hover:text-zinc-200" target="_blank" href="https://www.tiktok.com/@akukamukita.7?lang=en">Tiktok</a>
    </div>
  </footer>

  <script src="app.js"></script>
</body>
</html>``` 

13. frontend/styles.css = ```
/* frontend/styles.css */
::-webkit-scrollbar { width: 10px; height: 10px; }
::-webkit-scrollbar-thumb { background: #27272a; border-radius: 8px; }

.card { transition: transform .15s ease, border-color .2s; }
.card:hover { transform: translateY(-1px); border-color: #7c3aed; } /* ungu */

.badge { border-radius: 9999px; padding: 2px 8px; font-size: 12px; }

/* ===== Line clamp util ===== */
.line-clamp-2,
.line-clamp-3,
.line-clamp-4{
  overflow: hidden;
  text-overflow: ellipsis;
  line-clamp: 2;                    /* standar */
  display: -webkit-box;             /* fallback webkit */
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
}
.line-clamp-3{ line-clamp:3; -webkit-line-clamp:3; }
.line-clamp-4{ line-clamp:4; -webkit-line-clamp:4; }

/* inputs & buttons */
.inp{
  padding: .5rem .75rem; border-radius: .75rem;
  background: #0a0a0a; border:1px solid #27272a;
  outline: none; color:#e5e7eb;
}
.inp:focus{ border-color:#7c3aed; box-shadow:0 0 0 2px rgb(124 58 237 / .2); }

.btn-primary{
  padding:.5rem 1rem; border-radius:.75rem; font-weight:600; color:white;
  background-image: linear-gradient(to right,#7c3aed,#2563eb);
}
.btn-primary:hover{ filter:brightness(1.1); }
.btn-ghost{
  padding:.5rem 1rem; border-radius:.75rem; background:#18181b; border:1px solid #27272a; color:#e5e7eb;
}

/* === Job card layout: tombol tetap di bawah, kartu rapi 3 kolom === */
.job-card{
  display:flex; flex-direction:column; height:100%;
  contain: content; /* biar shadow/hover gak overflow */
  word-break: break-word;
}

.job-card .job-footer{ margin-top:auto; }

.job-card .title{
  /* Standard + webkit for broader support */
  line-clamp: 2;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  overflow: hidden;
  text-overflow: ellipsis;
}
.job-card .company{
  /* Standard + webkit for broader support */
  line-clamp: 1;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 1;
  overflow: hidden;
  text-overflow: ellipsis;
}
.job-card .meta{
  white-space: nowrap; overflow: hidden; text-overflow: ellipsis;
}


/* === Timeline: pulse untuk status 'active' === */
.timeline-card{ border:1px solid #27272a; }
.timeline-card.active{
border-color:#7c3aed;
box-shadow:0 0 0 0 rgba(124,58,237,.55), inset 0 0 0 1px rgba(124,58,237,.35);
animation:pulse-border 1.6s ease-out infinite;
}


@keyframes pulse-border{
0%  { box-shadow:0 0 0 0 rgba(124,58,237,.55), inset 0 0 0 1px rgba(124,58,237,.35); }
70% { box-shadow:0 0 0 12px rgba(124,58,237,0), inset 0 0 0 1px rgba(124,58,237,.2); }
100%{ box-shadow:0 0 0 0 rgba(124,58,237,0), inset 0 0 0 1px rgba(124,58,237,.35); }
}

/* Grid helper: paksa 3 kolom lebar & stabil di layar besar */
@media (min-width: 1280px){
  #jobs{ grid-template-columns: repeat(3, minmax(0,1fr)) !important; }
}


/* ====== Pager ====== */
.pager-bar{
  display:flex; align-items:center; justify-content:space-between;
  gap:.75rem; padding: .75rem 1rem;
  border:1px solid #1f1f23; background:#0b1020; /* nuansa dark-biru */
  border-radius: 1rem;
}
.pager-group{ display:flex; align-items:center; gap:.5rem; flex-wrap:wrap; }
.pager-btn{
  padding:.45rem .85rem; border:1px solid #243040; background:#0e1628;
  color:#cbd5e1; border-radius:.75rem; font-weight:600; font-size:.9rem;
  transition:filter .15s, transform .15s;
}
.pager-btn:hover{ filter:brightness(1.12); transform:translateY(-1px); }
.pager-btn[disabled]{ opacity:.45; cursor:not-allowed; transform:none; }
.pager-page{ width:2.4rem; text-align:center; padding:.45rem 0; }
.pager-page.active{
  background:#0f3d5e; color:#e6f1ff; border-color:#2c4a68;
}
.pager-ellipsis{ color:#94a3b8; padding:0 .4rem; }
.pager-meta{ font-size:.9rem; color:#a5b4fc; } /* “Halaman X dari Y” */


/* ===== Multi-select (custom dropdown) ===== */
.ms { position: relative; }
.ms .ms-btn {
  display:flex; align-items:center; justify-content:space-between;
  gap:.5rem; width:100%;
  padding:.5rem .75rem; border-radius:.75rem;
  background:#0a0a0a; border:1px solid #27272a; color:#e5e7eb;
}
.ms .ms-btn:hover { border-color:#3f3f46; }
.ms .ms-panel {
  position:absolute; left:0; right:0; top:calc(100% + .4rem);
  background:#0b0b0f; border:1px solid #27272a; border-radius:.75rem;
  box-shadow:0 10px 24px rgba(0,0,0,.35);
  z-index:50; padding:.5rem; display:none;
}
.ms.open .ms-panel { display:block; }
.ms .ms-search { width:100%; }
.ms .ms-list { max-height:240px; overflow:auto; margin-top:.5rem; }
.ms .ms-item { display:flex; align-items:center; gap:.5rem; padding:.4rem .5rem; border-radius:.5rem; }
.ms .ms-item:hover { background:#111827; }
.ms .ms-tags { display:flex; gap:.35rem; flex-wrap:wrap; }
.ms .ms-tag { background:#18181b; border:1px solid #27272a; padding:.1rem .5rem; border-radius:9999px; font-size:.75rem; color:#cbd5e1; }


/* ===== Smooth KPI Halo (calm wobble + breathe + gentle shimmer) ===== */
.stat-card{
  position:relative; overflow:hidden; isolation:isolate;
  background:linear-gradient(180deg, rgba(124,58,237,.05), rgba(2,6,23,0)) , #0b0b10;
  border:2px solid rgba(63,63,70,.9);
  box-shadow:0 6px 24px rgba(16,16,20,.45);
  transition:box-shadow .25s ease, transform .2s ease, border-color .2s ease;

  /* tweakable vars */
  --halo-speed: 16s;    /* makin besar = makin pelan */
  --halo-tilt:  12deg;  /* makin besar = ayunan lebih lebar */
  --halo-opacity: .32;  /* transparansi halo 0..1 */
}

/* halo gradient: gentle pendulum + tiny breathing */
.stat-card::before{
  content:"";
  position:absolute; inset:-2px; border-radius:inherit; z-index:0;
  background:conic-gradient(from 0deg,
    rgba(79,58,237,.65),
    rgba(56,189,248,.65),
    rgba(99,102,241,.65),
    rgba(91,33,190,.65));
  opacity:var(--halo-opacity);
  filter:blur(.5px);
  transform-origin:50% 50%;
  will-change:transform, opacity;
  animation:
    halo-wobble var(--halo-speed) ease-in-out infinite alternate,
    halo-breathe calc(var(--halo-speed) * 1.25) ease-in-out infinite;
}

/* inner stroke + shimmer area */
.stat-card::after{
  content:""; position:absolute; inset:0; border-radius:inherit; pointer-events:none; z-index:1;
  background:
    linear-gradient(180deg, rgba(124,58,237,.18), rgba(99,102,241,.10)) padding-box,
    radial-gradient(1000px 300px at -10% -30%, rgba(124,58,237,.18), transparent 55%),
    radial-gradient(900px 260px at 120% 140%, rgba(56,189,248,.12), transparent 60%);
  -webkit-mask:linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  mask:linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  padding:1.2px;
  box-shadow:
    inset 0 0 0 1px rgba(39,39,42,.85),
    0 0 0 1px rgba(124,58,237,.15);
}

.stat-card:hover{
  transform:translateY(-2px);
  border-color:rgba(99,102,241,.85);
  box-shadow:0 12px 34px rgba(23,23,23,.48), 0 0 0 1px rgba(124,58,237,.28) inset;
}

/* shimmer lembut saat hover */
.stat-card:hover::after{
  background:
    linear-gradient(110deg, transparent 0 40%, rgba(255,255,255,.06) 50%, transparent 60%),
    radial-gradient(1000px 300px at -10% -30%, rgba(124,58,237,.18), transparent 55%),
    radial-gradient(900px 260px at 120% 140%, rgba(56,189,248,.12), transparent 60%);
  background-size:200% 100%, auto, auto;
  animation:shimmer 1.2s ease forwards;
}

/* Typografi */
.stat-card .kpi-label{
  position:relative; z-index:2;
  font-size:clamp(.95rem, .85rem + .4vw, 1.1rem);
  letter-spacing:.2px;
}
.stat-card .kpi-number{
  position:relative; z-index:2;
  font-size:clamp(2rem, 1.6rem + 1.2vw, 2.9rem);
  line-height:1.1;
  text-shadow:0 1px 0 rgba(0,0,0,.35), 0 6px 18px rgba(124,58,237,.12);
  animation:heartbeat 2.8s ease-in-out infinite;
}
/* countdown lebih kecil */
.stat-card #countdown.kpi-number{
  font-size:clamp(1.25rem, 1rem + .6vw, 1.75rem);
}

/* === Keyframes: smooth wobble + breathe + shimmer + heartbeat === */
@keyframes halo-wobble{
  0%   { transform: rotate(calc(var(--halo-tilt) * -1)); }
  50%  { transform: rotate(0deg); }
  100% { transform: rotate(var(--halo-tilt)); }
}
@keyframes halo-breathe{
  0%,100% { opacity: calc(var(--halo-opacity) * 0.95); transform: translateZ(0) scale(1); }
  50%     { opacity: calc(var(--halo-opacity) * 1.05); transform: translateZ(0) scale(1.01); }
}
@keyframes shimmer{
  from{ background-position:-120% 0, 0 0, 0 0; }
  to  { background-position: 120% 0, 0 0, 0 0; }
}
@keyframes heartbeat{
  0%,20%,100% { transform:scale(1);    text-shadow:0 1px 0 rgba(0,0,0,.35), 0 6px 18px rgba(124,58,237,.12); }
  10%         { transform:scale(1.03); text-shadow:0 2px 0 rgba(0,0,0,.35), 0 10px 26px rgba(56,189,248,.16); }
}

/* Respect reduced-motion */
@media (prefers-reduced-motion: reduce){
  .stat-card::before, .stat-card .kpi-number{ animation:none !important; }
}



/* ===== Light Mode overrides (aktif saat <html> punya class .light) ===== */
html.light body{
  background:#f7f8fb;
  color:#0b0b12;
}

/* Card/border generik yang di markup pakai util Tailwind gelap */
html.light .bg-zinc-900\/60 { background: rgba(255,255,255,.92) !important; }
html.light .bg-zinc-900\/70 { background: rgba(255,255,255,.96) !important; }
html.light .bg-zinc-900     { background: #ffffff !important; }
html.light .bg-zinc-950     { background: #f7f8fb !important; }
html.light .border-zinc-800 { border-color:#e5e7eb !important; }

/* Teks util populer agar kontras di light */
html.light .text-zinc-200 { color:#1f2937 !important; }
html.light .text-zinc-300 { color:#374151 !important; }
html.light .text-zinc-400 { color:#4b5563 !important; }
html.light .text-zinc-500 { color:#6b7280 !important; }

/* Header blur strip */
html.light header { background: rgba(255,255,255,.85) !important; border-color:#e5e7eb !important; }

/* Pager & dropdowns */
html.light .pager-bar { background:#f1f5f9; border-color:#e5e7eb; }
html.light .pager-btn { background:#ffffff; border-color:#e5e7eb; color:#334155; }
html.light .pager-btn:hover { background:#f8fafc; }
html.light .ms .ms-btn { background:#ffffff; border-color:#e5e7eb; color:#0b0b12; }
html.light .ms .ms-panel { background:#ffffff; border-color:#e5e7eb; }

/* Job cards */
html.light .job-card { background:#ffffff !important; border-color:#e5e7eb !important; }
html.light .job-card .meta { color:#64748b !important; }

/* Timeline */
html.light .timeline-card { background:#ffffff; border-color:#e5e7eb; }
html.light .timeline-card.active { box-shadow:0 0 0 0 rgba(124,58,237,.35), inset 0 0 0 1px rgba(124,58,237,.25); }

/* KPI stat cards (lebih soft di light) */
html.light .stat-card{
  background:
    linear-gradient(180deg, rgba(124,58,237,.03), rgba(255,255,255,0)),
    #ffffff;
  border-color: rgba(0,0,0,.08);
  box-shadow: 0 8px 24px rgba(15,23,42,.08);
}
html.light .stat-card::before{
  opacity:.22;
}
html.light .stat-card .kpi-label{ color:#334155 !important; }
html.light .stat-card .kpi-number{ color:#111827 !important; }

/* Buttons */
html.light #btn-export { background:#0f172a; }
html.light #btn-export:hover { background:#111827; }


/* ===== KPI: perfect vertical centering ===== */
.stat-card{
  display: grid;            /* biar gampang center */
  align-content: center;    /* center vertical, termasuk multi-baris */
  justify-items: center;    /* center horizontal */
  gap: .4rem;               /* jarak label ↔ angka */
  min-height: 140px;        /* tinggi nyaman */
  padding-block: 20px;      /* ruang atas-bawah */
}

/* buang margin bawaan agar bener-bener center */
.stat-card .kpi-label,
.stat-card .kpi-number{
  margin: 0 !important;
}

/* kartu countdown biasanya 2–3 baris: kasih tinggi sedikit lebih besar */
.stat-card:has(#countdown){
  min-height: 156px;
}


/* Compare page tiny tweaks */
.cmp-dd button { display:block; }```

14. frontend/compare.html = ```
<!DOCTYPE html>
<html lang="id" class="dark">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Compare Jobs — MagangPulse</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="styles.css"/>
  <link rel="icon" type="image/png" sizes="32x32" href="assets/Logo MagangPulse.png">
  <link rel="icon" type="image/png" sizes="192x192" href="assets/Logo MagangPulse.png">
  <link rel="apple-touch-icon" href="assets/Logo MagangPulse.png">
  <link rel="shortcut icon" href="assets/Logo MagangPulse.png">
  <meta name="theme-color" content="#0a0a0a">
</head>
<body class="bg-zinc-950 text-zinc-200 min-h-screen">
  <header class="sticky top-0 z-10 backdrop-blur bg-zinc-950/80 border-b border-zinc-800">
    <div class="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
      <a href="index.html" class="text-xl font-bold tracking-tight">Magang<span class="text-violet-400">Pulse</span></a>
      <div class="flex items-center gap-2">
        <a href="index.html" class="px-3 py-2 rounded-xl bg-zinc-800 hover:bg-zinc-700 text-sm">← Kembali</a>
      </div>
    </div>
  </header>

  <main class="max-w-6xl mx-auto px-4 py-6 grid gap-6">
    <section class="rounded-2xl border border-zinc-800 bg-zinc-900/60 p-5">
      <h2 class="text-xl font-semibold">Compare Jobs</h2>
      <p class="text-sm text-zinc-400 mt-1">Pilih 2–3 lowongan untuk dibandingkan. Ketik minimal 3 karakter untuk mulai mencari.</p>

      <!-- Pickers -->
      <div class="grid md:grid-cols-3 gap-3 mt-4">
        <div class="cmp-slot" data-slot="0">
          <div class="text-xs text-zinc-400 mb-1">Job #1</div>
          <div class="relative">
            <input class="cmp-input inp w-full" placeholder="Cari judul/perusahaan (min. 3 karakter)…"/>
            <div class="cmp-dd absolute left-0 right-0 top-[110%] z-20 hidden rounded-xl border border-zinc-800 bg-zinc-900/95 max-h-72 overflow-auto"></div>
          </div>
          <div class="cmp-picked text-sm mt-2 text-zinc-300"></div>
        </div>

        <div class="cmp-slot" data-slot="1">
          <div class="text-xs text-zinc-400 mb-1">Job #2</div>
          <div class="relative">
            <input class="cmp-input inp w-full" placeholder="Cari judul/perusahaan (min. 3 karakter)…"/>
            <div class="cmp-dd absolute left-0 right-0 top-[110%] z-20 hidden rounded-xl border border-zinc-800 bg-zinc-900/95 max-h-72 overflow-auto"></div>
          </div>
          <div class="cmp-picked text-sm mt-2 text-zinc-300"></div>
        </div>

        <div class="cmp-slot" data-slot="2">
          <div class="text-xs text-zinc-400 mb-1">Job #3 (opsional)</div>
          <div class="relative">
            <input class="cmp-input inp w-full" placeholder="Cari judul/perusahaan (min. 3 karakter)…"/>
            <div class="cmp-dd absolute left-0 right-0 top-[110%] z-20 hidden rounded-xl border border-zinc-800 bg-zinc-900/95 max-h-72 overflow-auto"></div>
          </div>
          <div class="cmp-picked text-sm mt-2 text-zinc-300"></div>
        </div>
      </div>

      <div class="flex items-center justify-center gap-3 mt-4">
        <button id="btn-compare" class="btn-primary disabled:opacity-50" disabled>Bandingkan</button>
        <button id="btn-clear" class="btn-ghost">Reset</button>
      </div>
    </section>

    <!-- Result -->
    <section id="cmp-result" class="rounded-2xl border border-zinc-800 bg-zinc-900/60 p-5 hidden">
      <div class="flex items-center justify-between mb-3">
        <h3 class="font-semibold">Hasil Perbandingan</h3>
        <div class="text-xs text-zinc-500" id="cmp-count"></div>
      </div>

      <div class="overflow-x-auto">
        <table class="w-full text-sm border-separate" style="border-spacing:0 10px;">
          <tbody id="cmp-tbody"></tbody>
        </table>
      </div>
    </section>
  </main>

  <script src="compare.js"></script>
</body>
</html>```

frontend/compare.js = ```
// frontend/compare.js

// API base (sama seperti app.js)
const ORIGIN_OK =
  typeof location !== "undefined" &&
  location.origin &&
  location.origin !== "null" &&
  !location.origin.startsWith("file");
const API_BASE = (ORIGIN_OK ? location.origin : "http://127.0.0.1:8000").replace(/:\d+$/, ":8000");

const $  = (s) => document.querySelector(s);
const $$ = (s) => Array.from(document.querySelectorAll(s));
const debounce = (fn, ms=250)=>{ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a), ms); }; };
const pct = (x)=> (x==null? "—" : (x*100).toFixed(1)+"%");
const num = (x)=> (x==null || isNaN(Number(x)) ? "—" : Number(x).toLocaleString("id-ID"));

const MIN_CHARS = 3; // ← batas minimal ketik untuk mulai mencari

const picked = [null, null, null]; // objek job (r from API)

function updateButtons(){
  const n = picked.filter(Boolean).length;
  $("#btn-compare").disabled = n < 2;
}
function clearAll(){
  picked.fill(null);
  $$(".cmp-picked").forEach(el=>el.textContent="");
  $$(".cmp-input").forEach(inp=>{ inp.value=""; });
  $("#cmp-result").classList.add("hidden");
  updateButtons();
}

// hanya kirim request kalau q >= 3
async function searchJobs(q){
  q = (q || "").trim();
  if (q.length < MIN_CHARS) return [];
  const p = new URLSearchParams();
  p.set("page", "1");
  p.set("page_size", "10");
  p.set("sort", "recent");
  p.set("query", q);
  const res = await fetch(`${API_BASE}/api/lowongan?`+p.toString(), {cache:"no-store"});
  if(!res.ok) return [];
  const j = await res.json();
  return j.data || [];
}

function renderDropdown(dd, rows, slotIdx){
  if(!rows.length){
    dd.innerHTML = `<div class="p-2 text-xs text-zinc-500">Tidak ada hasil.</div>`;
    return;
  }
  dd.innerHTML = rows.map(r => `
    <button type="button" class="w-full text-left p-2 hover:bg-zinc-800/70">
      <div class="font-medium">${r.judul || "—"}</div>
      <div class="text-xs text-zinc-400">${r.perusahaan || "—"} • ${(r.lokasi||"—").toUpperCase()}</div>
    </button>
  `).join("");
  Array.from(dd.children).forEach((btn, i)=>{
    btn.addEventListener("click", ()=>{
      picked[slotIdx] = rows[i];
      const box = dd.closest(".cmp-slot").querySelector(".cmp-picked");
      box.innerHTML = `
        <div class="rounded-xl border border-zinc-800 bg-zinc-900 p-2">
          <div class="font-medium">${rows[i].judul || "—"}</div>
          <div class="text-xs text-zinc-500">${rows[i].perusahaan || "—"}</div>
          <div class="text-xs text-zinc-500">${(rows[i].lokasi||"—").toUpperCase()}</div>
        </div>`;
      dd.classList.add("hidden");
      updateButtons();
    });
  });
}

function setupSlot(slot){
  const idx = Number(slot.dataset.slot);
  const inp = slot.querySelector(".cmp-input");
  const dd  = slot.querySelector(".cmp-dd");

  inp.addEventListener("input", debounce(async ()=>{
    const q = (inp.value||"").trim();

    // tampilkan hint ketika < MIN_CHARS
    if(q.length < MIN_CHARS){
      dd.classList.remove("hidden");
      dd.innerHTML = `<div class="p-2 text-xs text-zinc-500">Ketik minimal ${MIN_CHARS} karakter…</div>`;
      return;
    }

    const rows = await searchJobs(q);
    dd.classList.remove("hidden");
    renderDropdown(dd, rows, idx);
  }, 250));

  document.addEventListener("click", (e)=>{
    if(!slot.contains(e.target)) dd.classList.add("hidden");
  });
}

function fieldRow(label, values){
  const th = `<th class="text-left align-top px-3 py-2 text-xs text-zinc-400 w-48">${label}</th>`;
  // whitespace-pre-line agar deskripsi (newline) rapi
  const tds = values.map(v => `<td class="align-top px-3 py-2 rounded-xl border border-zinc-800 bg-zinc-900 whitespace-pre-line">${v}</td>`).join("");
  return `<tr>${th}${tds}</tr>`;
}

function renderCompare(){
  const cols = picked.filter(Boolean);
  if(cols.length < 2) return;

  $("#cmp-count").textContent = `${cols.length} job dibandingkan`;
  const vals = (fn)=> cols.map(fn);

  const body = [
    // Judul + perusahaan
    fieldRow("Judul", vals(r=>`<div class="font-semibold">${r.judul||"—"}</div><div class="text-xs text-zinc-500">${r.perusahaan||"—"}</div>`)),
    fieldRow("Lokasi", vals(r=>(r.lokasi||"—").toUpperCase())),
    fieldRow("Program Studi", vals(r => r.sektor || "—")),    
    fieldRow("Tanggal Posting", vals(r=> r.tanggal_posting || "—")),
    fieldRow("Pelamar", vals(r=> num(r.pelamar))),
    fieldRow("Kuota",   vals(r=> num(r.kuota))),
    fieldRow("Acceptance Rate", vals(r=> pct(r.acceptance_rate))),
    fieldRow("Demand Ratio",    vals(r=> (r.demand_ratio==null? "—" : Number(r.demand_ratio).toFixed(2)))),
    // === BARU: Deskripsi ===
    fieldRow("Deskripsi",    vals(r => (r.deskripsi_short && r.deskripsi_short.trim()) ? r.deskripsi_short : "—")),
    fieldRow("Tautan Sumber", vals(r=> r.source_url ? `<a class="underline text-sky-400" href="${r.source_url}" target="_blank" rel="noopener">Lihat detail →</a>` : "—")),
  ].join("");

  $("#cmp-tbody").innerHTML = body;
  $("#cmp-result").classList.remove("hidden");
}

window.addEventListener("DOMContentLoaded", ()=>{
  $$(".cmp-slot").forEach(setupSlot);
  $("#btn-compare").addEventListener("click", renderCompare);
  $("#btn-clear").addEventListener("click", clearAll);
  updateButtons();
});
```